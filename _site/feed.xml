<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-11T03:42:19+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">오늘의 공기</title><subtitle>오늘의 공부 기록</subtitle><entry><title type="html">[book] 소프트웨어 장인 ➁ 소프트웨어 장인</title><link href="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8/" rel="alternate" type="text/html" title="[book] 소프트웨어 장인 ➁ 소프트웨어 장인" /><published>2018-07-20T00:00:00+09:00</published><updated>2018-07-20T00:00:00+09:00</updated><id>http://localhost:4000/%5BBook%5D%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EC%9E%A5%EC%9D%B8%20%E2%9E%81%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EC%9E%A5%EC%9D%B8</id><content type="html" xml:base="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8/">&lt;!--more--&gt;

&lt;h3 id=&quot;매니페스토&quot;&gt;매니페스토&lt;/h3&gt;

&lt;p&gt;이 책에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;매니페스토 Manifesto&lt;/code&gt; 라는 낯선 용어가 등장한다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A7%A4%EB%8B%88%ED%8E%98%EC%8A%A4%ED%86%A0&quot;&gt;위키피디아의 정의&lt;/a&gt;에 따르면, 매니페스토는 다음과 같은 의미를 지닌다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;매니페스토&lt;/strong&gt;(Manifesto)는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B0%9C%EC%9D%B8&quot;&gt;개인&lt;/a&gt;이나 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%B2%B4&quot;&gt;단체&lt;/a&gt;가 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8C%80%EC%A4%91&quot;&gt;대중&lt;/a&gt;에 대하여 확고한 정치적 의도와 견해를 밝히는 것으로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%97%B0%EC%84%A4&quot;&gt;연설&lt;/a&gt;이나 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AC%B8%EC%84%9C&quot;&gt;문서&lt;/a&gt;의 형태이다. 종종 비정치적인 분야에서도 자신의 주장과 견해를 분명히 밝히는 때에도 사용된다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%9C%EA%B5%AD&quot;&gt;한국&lt;/a&gt;에서는 예산확보, 구체적 실행계획 등이 있어 이행이 가능한 선거 공약의 의미로 주로 쓰인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;선거공약의 개념으로 이 책에서 말하는 매니페스토를 설명하기에는 어딘가 동떨어진 느낌이다. 대한민국에서 매니페스토의 개념이 좁은 의미로만 쓰이는 걸까. &lt;a href=&quot;https://en.wikipedia.org/wiki/Manifesto&quot;&gt;위키디피아에서 영어 문서&lt;/a&gt;를 찾아보았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;strong&gt;manifesto&lt;/strong&gt; is a published verbal declaration of the intentions, motives, or views of the issuer, be it an individual, group, political party or government. A manifesto usually accepts a previously published opinion or &lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_decision-making&quot;&gt;public consensus&lt;/a&gt; or promotes a new idea with prescriptive notions for carrying out changes the author believes should be made.* &lt;strong&gt;It often is &lt;a href=&quot;https://en.wikipedia.org/wiki/Politics&quot;&gt;political&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Art_manifesto&quot;&gt;artistic&lt;/a&gt; in nature, but may present an individual’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Life_stance&quot;&gt;life stance&lt;/a&gt;.&lt;/strong&gt; Manifestos relating to &lt;a href=&quot;https://en.wikipedia.org/wiki/Religious_belief&quot;&gt;religious belief&lt;/a&gt; are generally referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Creed&quot;&gt;creeds&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;매니페스토&lt;/strong&gt;는 주로 이전에 발표된 대중의 의견이나 저자가 변경해야한다고 생각하는 &lt;strong&gt;규범적인 개념&lt;/strong&gt;으로 새로운 아이디어를 장려한다. 본질적으로 정치적이거나 예술적이지만, 개인의 &lt;strong&gt;삶의 자세&lt;/strong&gt;를 나타낼 수도 있다.&lt;/p&gt;

&lt;p&gt;선거공약 개념의 매니페스토가 아니라, &lt;code class=&quot;highlighter-rouge&quot;&gt;새로운 아이디어를 장려하고, 삶의 자세를 나타내는 개념&lt;/code&gt; 이 이 책에서 말하고자하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;매니페스토&lt;/code&gt;일 것이다.&lt;/p&gt;

&lt;h2 id=&quot;소프트웨어-장인정신&quot;&gt;소프트웨어 장인정신&lt;/h2&gt;

&lt;p&gt;이 책에서는 소프트웨어 장인정신의 여러 정의를 보여준다.&lt;/p&gt;

&lt;h3 id=&quot;위키피디아에서의-정의&quot;&gt;위키피디아에서의 정의&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘소프트웨어 장인정신’은 &lt;strong&gt;소프트웨어를 개발할 때 개발자 스스로의 코딩스킬을 강조&lt;/strong&gt;하는 개념이다. 이러한 개념은 주류 소프트웨어 업계가 개발자의 역량보다는 다른 것들, 즉 예산과 같은 것들을 우선시하는 병폐에 대한 개발자들의 반발로 나타났다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 정의를 보면,  ‘그래서 어떻게 강조하는건데?’ 라는 의문이 든다. 이에 저자 또한 위의 정의가 마음에 안들었는지, 주관적으로 소프트웨어 장인정신를 정의했다. 저자의 좀더 주관적인 정의가 제일 와닿는다.&lt;/p&gt;

&lt;h3 id=&quot;좀더-주관적인-정의&quot;&gt;좀더 주관적인 정의&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인정신은 &lt;strong&gt;마스터가 되어가는 긴 여정&lt;/strong&gt;이다. 소프트웨어 장인정신은 소프트웨어 개발자가 &lt;strong&gt;스스로 선택한 커리어에 책임감을 가지고, 지속적으로 새로운 도구와 기술을 익히며 발전하겠다는 마음가짐&lt;/strong&gt;이다. 소프트웨어 장인정신은 &lt;strong&gt;책임감, 프로페셔널리즘, 실용주의, 그리고 소프트웨어 개발자로서의 자부심&lt;/strong&gt;을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마스터가 되어가는 긴 여정. IT는 끊임없이 새로운 기술이 나오는데, 컴퓨터가 아닌 이상 마스터는 닿을 수 없는 경지일지도 모르겠다. 이 업계는 지속적으로 새로운 도구와 기술을 익히며 기술과 함께 발전해야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;책임감, 프로페셔널리즘, 실용주의, 자부심.&lt;/strong&gt; 일상에서 접할 수 있는 지극히 평범한 단어들이지만, 좀 더 깊은 이해를 위해 사전에서 그 뜻을 찾아보았다. 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;책임감&lt;/strong&gt; 責任感 &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;맡아서 해야할 임무나 의무를 중히 여기는 마음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프로페셔널리즘&lt;/strong&gt; professtionalism &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;자기의 직업과 그 기능, 전문 지식에 강한 자부심과 탐구심을 가지며, 사회적 책임을 자각하는 일&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;실용주의&lt;/strong&gt; pragmatism &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;넓은 의미로는 유용성·효율성·실제성을 가리키며 학문적 의미로는 추상적·궁극적 원리의 권위에 반대하는 태도를 가리킨다.&lt;/p&gt;

  &lt;p&gt;미국을 중심으로 발달한 철학 사상으로 행동과 실천을 중시하는 철학으로 글자 그대로 현실 생활에 있어서의 유용성에 따라 사물의 가치를 결정하려는 사상&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;자부심&lt;/strong&gt; 自負心 &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;자신의 가치나 능력을 믿고 당당히 여기는 마음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;짧은-정의&quot;&gt;짧은 정의&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인정신은 소프트웨어 개발의 프로페셔널리즘에 대한 것이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;정의-이상의-의미&quot;&gt;정의 이상의 의미&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인정신은 어떤 이념이나 마음가짐에 더 가깝다고 생각한다. (중략) 자신이 하는 일에 주인의식을 가지고 프로페셔널하게 행동하고, 고객이 원하는 것이 무엇이든 달성할 수 있도록 돕는다. 다른 개발자들에게 배우고 자신의 지식을 나누며, 경험이 부족한 개발자들을 멘토링하는 것들이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;저자의 정의에 따르면, 책임감, 프로페셔널리즘, 실용주의, 자부심은 모두 &lt;strong&gt;이념이나 마음가짐&lt;/strong&gt;이다. 이런 이념과 마음가짐을 가진 개발자를 장인이라고 부르는 걸까.&lt;/p&gt;

&lt;h3 id=&quot;공예-사업-엔지니어링-과학-또는-예술&quot;&gt;공예, 사업, 엔지니어링, 과학 또는 예술&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;초기에는 어떤 예술에 가까운 것으로 표현되었으나, 좀 지나서는 장인의 공예 작품으로 대하는 것을 선호하게 되었다. (중략)&lt;/p&gt;

  &lt;p&gt;정말 중요한 것은 비유가 아니라 그 비유가 &lt;strong&gt;상징하고, 장려하는 가치와 행동들&lt;/strong&gt;이다.&lt;/p&gt;

  &lt;p&gt;소프트웨어 장인정신은 시켜야만 일하는 역량 미달의 노동자가 아니라 소프트웨어 프로페셔널의 수준을 높여, 프로의 모습으로 일하는 소프트웨어 개발자를 지향한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제까지 요약하자면, 이념이나 마음가짐에 가까운 건데, 소프트웨어를 공예 작품으로 보고, 중세의 대장장이처럼 책임감, 프로페셔널리즘, 실용주의, 자부심을 가지는 게 소프트웨어 장인정신이라 말한다.&lt;/p&gt;

&lt;h4 id=&quot;매니페스토-1&quot;&gt;매니페스토&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인을 열망하는 우리는, 스스로의 기술을 연마하고, 다른 사람들이 기술을 배울 수 있도록 도움으로써 프로페셔널 소프트웨어 개발의 수준을 높인다. 이러한 일을 하는 과정에서 우리는 다음과 같은 가치들을 추구한다.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;동작하는 소프트웨어뿐만 아니라, &lt;strong&gt;정교하고 솜씨 있게 만들어진 작품을,&lt;/strong&gt; 변화에 대응하는 것뿐만 아니라, &lt;strong&gt;계속해서 가치를 더하는 것을,&lt;/strong&gt; 개별적으로 협력하는 것뿐만 아니라, &lt;strong&gt;프로페셔널 커뮤니티를 조성하는 것을,&lt;/strong&gt; 고객과 협업하는 것뿐만 아니라, &lt;strong&gt;생산적인 동반자 관계를,&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;이 앞의 항목들(일반 굵기)을 추구하는 과정에서, 다음 항목들(볼드체)이 꼭 필요함을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 매니페스토의 핵심은 부제, &lt;strong&gt;&lt;em&gt;‘프로페셔널 소프트웨어 개발의 수준을 높인다’&lt;/em&gt;&lt;/strong&gt;에 있다. 이 매니페스토는 경험이 많고 재능있는 개발자들이 겪는 어려움, 추구하는 가치, 열망을 담고 있다. 부실한 관리, 잘못 정의된 절차 그리고 형편없는 코드때문에 프로젝트가 실패하는 일은 없어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발자들이 이런 문제들을 직접 해결해보면서 업계의 소프트웨어 개발을 바라보는 시각을 변화시키려고 한다. 새롭고 혁신적인 절자츨 제안만 하는 것이 아니라, 개발자 스스로가 자신이 하는 일 자체에 얼마나 책임감과 열정있는지 보이려는 것이다. 뿐만 아니라 고객들과 함께 일하며 훌륭한 제품, 오래 살아 남는 소프트웨어를 만들면서 고객이 원하는 바를 성취하게끔 도우려 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;동작하는-소프트웨어-뿐만-아니라-정교하며-솜씨-있게-만들어진-작품을&quot;&gt;‘동작하는 소프트웨어 뿐만 아니라, 정교하며 솜씨 있게 만들어진 작품을’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;좋은 소프트웨어라면 그 애플리케이션이 얼마나 오래되었든 간에 개발자가 쉽게 이해할 수 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;변화에-대응하는-것뿐-아니라-계속해서-가치를-더하는-것을&quot;&gt;‘변화에 대응하는 것뿐 아니라, 계속해서 가치를 더하는 것을’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;신규 기능을 추가하거나 버그 수정만을 뜻하지 않는다. 코드를 깔끔하게 정리하고 구조를 개선하며 확장성을 높이고, 테스트 가능하게 하고, 쉽게 유지보수할 수 있게 하는 것을 포함한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어가 오래될수록 고통과 비용이 아닌 그 가치가 커져야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;개별적으로-협력하는-것뿐만-아니라-프로페셔널-커뮤니티를-조성하는-것을&quot;&gt;‘개별적으로 협력하는 것뿐만 아니라 프로페셔널 커뮤니티를 조성하는 것을’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;업계를 발전시키는 가장 좋은 방법은 새롭게 참여하는 개발자들에게 영감을 주고 멘토링함으로써 우리가 배운 바를 공유하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인은 항상 다른 사람에게 배우려 하는 겸손한 사람이어야 하고 경험이 적은 개발자와 지식을 공유하기를 주저하지 않는 사람이어야 한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;상대에게 배우는 것&lt;/strong&gt;은 더 나아지기 위한 최선의 방법이다. 블로그에 글을 올리고, 오픈 소스 프로젝트에 기여하고, 작성한 코드를 공개하고, 지역 커뮤니티에 참여하고, 다른 개발자와 페어 프로그래밍을 하는 것은 업계의 발전을 위해 할 수 있는 방법들이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 챕터에서 제일 마음에 드는 구절이다. 혼자만의 발전이 아닌 업계의 발전을 지향하는 사람이 되고 싶다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서로를 더 성장시킬 만한 사람들과 함께 일하고 지식을 나누며 상대에게 배우는 것, 그저 같은 사무실을 쓰는 동료이기보다는 서로에게 영감을 주는 프로페셔널이자 친구를 기대한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;고객과-협업하는-것뿐만-아니라-생산적인-동반자-관계를&quot;&gt;‘고객과 협업하는 것뿐만 아니라, 생산적인 동반자 관계를’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인은 공장 노동자가 아니다. 적극적으로 프로젝트의 성공에 기여해야한다. 요구사항에 질문하고, 비즈니스를 이해하고, 개선사항을 제안하며, 고객 또는 고용주와 생산적인 동반자 관계를 맺어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;동기 부여 수준이 높은 팀은 프로젝트를 성공으로 이끌 확률이 상당히 높다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객을 도와 그들의 업무 절차를 개선하고, 좀더 실현가능성이 높은 선택지를 제공해야 한다. 불필요한 관료주의를 없애고, 고객의 비즈니스 도메인을 이해하며 그들이 생산하는 가치와 관련된 요구사항에 질문할 수 있어야 한다. 업무 우선순위를 정하고 계획하는 것을 돕는 일 또한 프로젝트의 성공을 위해 코딩만큼 중요한 일이다. 생산적인 동반자 관계는 &lt;strong&gt;어떤 순간이든 고객에게 가치를 제공하는 것&lt;/strong&gt;을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 설명은 소프트웨어 장인정신에 국한되지 않고, 모든 분야에 아우르는 자발적인 태도를 설명한다고 생각한다. 학교에서 주어지는 팀프로젝트부터 심지어 자발적으로 든 동아리, 학보사에서 다양한 태도의 사람들을 볼 수 있었다. 대체로 자발적인 사람들은 의욕적이다. 무슨 일이든 재밌어하며, 나서서 하고 싶어 한다. 어떤 문제에 부딪혔을 때도 좌절하는 대신 해결방안을 모색한다. 그에 반해 수동적인 사람들은 모임 자체가 힘들다.&lt;/p&gt;

&lt;p&gt;‘네 인생의 주인이 돼라’ 등 자발적인 행동을 부추기는 인용구가 넘쳐나는 사회에서 너무 당연한 말이 아닐까 싶다. 청소년 때 읽었던 공부에 관한 자기계발서의 회사 버전 느낌인데, 어떻든 &lt;strong&gt;주체적으로 살자&lt;/strong&gt;는 말이라 좋다.&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;

&lt;p&gt;산드로 만쿠소 저, 권오인 옮김, 소프트웨어 장인, 길벗, 2015.09.25&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://ko.dict.naver.com/detail.nhn?docid=36931300&quot;&gt;책임감, 네이버 국어사전&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://alldic.daum.net/search.do?q=%ED%94%84%EB%A1%9C%ED%8E%98%EC%85%94%EB%84%90%EB%A6%AC%EC%A6%98&quot;&gt;프로페셔널리즘, 다음 사전&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://100.daum.net/encyclopedia/view/b13s3319b&quot;&gt;실용주의, 다음백과&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://terms.naver.com/entry.nhn?docId=924823&amp;amp;cid=47331&amp;amp;categoryId=47331&quot;&gt;실용주의, Basic 중학생이 알아야 할 사회·과학상식&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://dic.daum.net/word/view.do?wordid=kkw000215540&amp;amp;supid=kku000271121&quot;&gt;자부심, 다음 한국어사전&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="TIR" /><category term="소프트웨어 장인" /><category term="소프트웨어 장인정신" /><summary type="html"></summary></entry><entry><title type="html">[book] 소프트웨어 장인 ➀애자일</title><link href="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%95%A0%EC%9E%90%EC%9D%BC/" rel="alternate" type="text/html" title="[book] 소프트웨어 장인  ➀애자일" /><published>2018-07-19T00:00:00+09:00</published><updated>2018-07-19T00:00:00+09:00</updated><id>http://localhost:4000/%5BBook%5D%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EC%9E%A5%EC%9D%B8%20%20%E2%9E%80%EC%95%A0%EC%9E%90%EC%9D%BC</id><content type="html" xml:base="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%95%A0%EC%9E%90%EC%9D%BC/">&lt;!--more--&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tir&quot;&gt;TIR&lt;/h2&gt;

&lt;p&gt;두달 전, 우아한형제들의 인턴을 지원했었다. 개발서 중 읽었던 책 중 &lt;strong&gt;중요하다&lt;/strong&gt;고 생각하는 3권과 그 이유를 적으라는 문항이 나를 당황스럽게 만들었다. 돌아보니 죄다 언어와 관련된 책들 뿐이었다. 시중에 나와있는 수많은 언어책 들 중 내가 읽은게 정말 중요하다고 어필할 수가 없었다. 기술은 끊임없이 업데이트되고 있었고, 내가 읽었던 책들은 낡은 지식이 되어가고 있었다.&lt;/p&gt;

&lt;p&gt;이 문항은 두달 후 나에게 기술과 관련된 책이 아니라, 개념에 대한 책을 찾아보게 만들었다.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;하지만 독서도 기록을 해야 더 오래 기억에 남는 법. &lt;code class=&quot;highlighter-rouge&quot;&gt;TIL&lt;/code&gt;을 본 따, &lt;code class=&quot;highlighter-rouge&quot;&gt;TIR, Today I Read&lt;/code&gt;도 해보면 어떨까 생각이 들었다. 매일 읽고 기록하고 싶다.&lt;/p&gt;

&lt;h1 id=&quot;part-1-이념과-태도&quot;&gt;Part 1 이념과 태도&lt;/h1&gt;

&lt;h2 id=&quot;21세기의-소프트웨어-개발&quot;&gt;21세기의 소프트웨어 개발&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;1990년 대에는 난해한 코드를 만들 수 있는 능력이 개발자의 실력을 가늠하는 척도였다고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;타인도 이해할 수 있는 코드를 짜야한다고 어디선가 주워들은 적이 있다. 그 때는 ‘그렇겠다. 같이 하는 일인데…’ 끄덕이고 넘어갔던 일이, 그 후 몇 번의 협업을 통해 정말 중요하다고 깨닫게 되었다. 아직도 기본을 위해 걸어야할 길이 많이 남아있지만, 남들이 이해하기 쉬운 코드를 짜고 싶다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아침에 눈을 뜰 때마다 오늘 할 일이 하고 싶어 기대되는 일만 하기로 스스로와 약속했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;정리하면 커리어 패스를 정할 때는 내가 열정이 있는 것, 진정 즐겁게 할 수 있는 것을 따라야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;초반부에는 이런 말들이 있다. 자기 개발서 같은 시작이 마음에 든다. 당연한 말들이 와닿는 건 모두가 알고 있으면서도, 그렇게 살아가는 게 힘들어서가 아닐까. ( t.m.i. 13년도 이후 자기계발서는 잘 안읽는다. 어떤 일이든 행동이 제일 중요하다는 걸 깨달았다)&lt;/p&gt;

&lt;h3 id=&quot;고참개발자&quot;&gt;고참개발자&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;10년 동안, 다른 프로젝트, 다른 기술, 다른 회사에서 일한 것과 10년 동안 같은 회사, 같은 프로젝트, 같은 사람, 같은 기술로만 일한 것은 크게 다르다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 말을 따르면, 개발자라는 직업은 &lt;strong&gt;이직&lt;/strong&gt;이 강점으로 다가올 수도 있을까?&lt;/p&gt;

&lt;h3 id=&quot;새로운-현실&quot;&gt;새로운 현실&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;코딩은 개발자가 해야 하는 많은 일들 중에 하나일뿐이다. 코딩을 잘 하거나 특정 언어나 프레임워크에 매우 익숙하다고 해서 고참 개발자가 되는 것은 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RGRG~ 코딩에 자신감이 조금 부족하고, 다른 외향적인 것들에 &lt;strong&gt;강점&lt;/strong&gt;을 가진 내가 위로받는 문구였다. 그런데 뒷부분에 &lt;code class=&quot;highlighter-rouge&quot;&gt;당연히 잘해야하는 것&lt;/code&gt;처럼 나와있었다. 설레발이었다. 개발을 조금 못해도 괜찮을거라는(?) 희망이 와르륵 무너졌다. 생각해보면, 개발을 못하는 개발자는 말이 안된다. 저자는 개발을 &lt;strong&gt;기본으로&lt;/strong&gt; 다음과 같은 &lt;strong&gt;여러 가지&lt;/strong&gt;를 할 수 있어야 한다고 말한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;고객과 대화하기&lt;/li&gt;
    &lt;li&gt;테스트/배포 자동화하기&lt;/li&gt;
    &lt;li&gt;전체 비즈니스에 영향을 미칠 기술 선정하기&lt;/li&gt;
    &lt;li&gt;지리적으로 분산된 팀들과 협업하기&lt;/li&gt;
    &lt;li&gt;고객을 도와 필요한 작업을 정의하기&lt;/li&gt;
    &lt;li&gt;우선순위 선정하기&lt;/li&gt;
    &lt;li&gt;진척 상황 보고하기&lt;/li&gt;
    &lt;li&gt;변경사항과 기대일정 관리하기&lt;/li&gt;
    &lt;li&gt;잠재 고객 및 파트너에게 제품 소개하기&lt;/li&gt;
    &lt;li&gt;사전 영업 활동 지원하기&lt;/li&gt;
    &lt;li&gt;개발 일정과 비용 산출하기&lt;/li&gt;
    &lt;li&gt;채용 면접하기&lt;/li&gt;
    &lt;li&gt;아키텍처 설계하기&lt;/li&gt;
    &lt;li&gt;비기능적 요구사항과 계약 조건(SLAS) 검토하기&lt;/li&gt;
    &lt;li&gt;사업 목표 이해하기&lt;/li&gt;
    &lt;li&gt;주어진 여건에서 최적의 결정하기&lt;/li&gt;
    &lt;li&gt;새로운 기술 주시하기&lt;/li&gt;
    &lt;li&gt;더 나은 업무 방식 찾기&lt;/li&gt;
    &lt;li&gt;고객에게 가치 있는 상품이 전달되고 있는지 고민하기&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 많은 것을 어우르는 개발자가 되길 소망한다.&lt;/p&gt;

&lt;h2 id=&quot;애자일&quot;&gt;애자일&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일은 어떤 단일 개념이 아니라, 서로 다른 &lt;strong&gt;여러 맥락에 따른 방법론과 테크닉의 조합&lt;/strong&gt;이다. 소프트웨어 프로젝트는 변화 자체가 기본 속성이고, 애자일은 개발팀과 기업들이 그러한 변화에 적응할 수 있도록 변화와 관련된 위험들을 줄인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;작년 소프트웨어 공학 때 처음 애자일에 대한 개념을 접했다. 그 당시 시험으로 암기를 했었는데, 문제에 대한 답을 적을 순 있어도 설명하기 어려웠다. 이번 독서가 애자일이 무엇인지 설명할 수 있는 계기가 되었으면 좋겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postImages/TIR/tir-1.jpg&quot; alt=&quot;why&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;절차적인-관점에서의-애자일-원칙&quot;&gt;절차적인 관점에서의 애자일 원칙&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;팀과 조직이 어떻게 구성되고 협업해야하는지에 대한 것들을 규정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;회의 방식&lt;/li&gt;
    &lt;li&gt;구성원 각각의 역할&lt;/li&gt;
    &lt;li&gt;요구사항 파악 방법&lt;/li&gt;
    &lt;li&gt;작업 진척 속도 파악 방법&lt;/li&gt;
    &lt;li&gt;점진적/반복적으로 일할 때 취하는 방식&lt;/li&gt;
    &lt;li&gt;진행 상황을 개발팀 밖의 관계자(고객, 영업 등)에게 전달하는 방식&lt;/li&gt;
    &lt;li&gt;비즈니스 피드백 방식&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 원칙의 절차적인 부분들은 팀에 정말로 중요한 것, 비즈니스에 가치가 있는 것에 집중한다. 이러한 방법론들을 통해 팀이 올바른 결과물을 만들어가는지, 즉 &lt;strong&gt;올바른 목표를 향해 진행 중&lt;/strong&gt;인지 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;기술적인-관점에서의-애자일-원칙&quot;&gt;기술적인 관점에서의 애자일 원칙&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 원칙의 기술적인 부분들은 개발, 확장, 유지보수, 제품을 출시(또는 납품, 서비스 배포)하면서 겪는 어려움들에 대해 특정한 기술적 관례나 기술자체를 매우 구체적으로 가이드한다. &lt;strong&gt;테스트 주도 개발(TDD), 페어 프로그래밍, 지속적인 통합, 단순한 디자인 원칙&lt;/strong&gt; 등과 같은 것이다. 이러한 기술적 원칙들은 소프트웨어의 품질에 집중하면서 팀이 결과물을 올바르게 만들어 가는지, 즉 &lt;strong&gt;목표한 것을 올바르게 실행하고 있는지&lt;/strong&gt;에 대해 안심할 수 있게 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일을-따른다는-것&quot;&gt;애자일을 따른다는 것&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 방법론들은 모두 빠르고 짧은 피드백 루프에 대한 것이다. 더 빨리, 더 짧게 피드백 루프를 만들수록 더 애자일해진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일은 문제 자체를 해결해 주지는 않는다. 애자일은 문제를 드러나게 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일에서는 프로젝트 시작 첫 주부터 동작하는 소프트웨어를 만든다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;오늘날에는 테스트, 분석, 비즈니스에 대한 이해, 커뮤니케이션 능력, 보다 외향적인 성격을 소프트웨어 프로페셔널에게 요구한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일-매니페스토&quot;&gt;애자일 매니페스토&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리는 스스로 소프트웨어를 개발하고, 다른 사람들이 개발하는 것을 도와주면서 더 나은 소프트웨어 개발 방법들을 찾고 있다. 이 과정에서 우리는 다음과 같은 가치를 중요하게 생각한다.&lt;/p&gt;

  &lt;p&gt;절차와 도구보다는 &lt;strong&gt;개성과 화합을&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;방대한 문서작업보다는 &lt;strong&gt;동작하는 소프트웨어를&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;계약 조건에 대한 협상보다는 &lt;strong&gt;고객과의 협력을&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;계획을 따르는 것을 넘어서서 &lt;strong&gt;변화에 대처하는 것을&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;더 가치있게 여긴다.&lt;/p&gt;

  &lt;p&gt;좌측의 사항도 가치가 있음을 인정하지만 우리는 우측의 사항에 더 높은 가치를 둔다는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 가치관을 가지고 있는 사람들과 일하고 싶다. 무의식 속에 보통의 회사에서는 좌측의 사항에 맞추어 돌아가고, 그럴 수 밖에 없다고 느껴진다. 이익을 추구하는 집단에서 개성과 화합에 가치를 둔다는 말보다 절차와 도구에 가치를 둔다는 말이 더 와닿기 때문이다.&lt;/p&gt;

&lt;p&gt;그래서 애자일 매니페스토 웹사이트에 실린 위의 내용이 인상적이다.  우측의 사항이 좌측의 사항보다 더 효율적일 수 있다고 보는 시각이 이제까지 현업에서 겪었던 고충에 대한 해결 방안 중에 하나가 아닐까.&lt;/p&gt;

&lt;h5 id=&quot;애자일-매니페스토의-원칙들&quot;&gt;애자일 매니페스토의 원칙들&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;가치있는 소프트웨어를 일찍, 지속적으로 전달하여 고객을 만족시키는 것을 최우선으로 한다.&lt;/li&gt;
    &lt;li&gt;개발의 막바지 단계이더라도 고객의 요구사항 변경을 환영한다. 애자일 프로세스들은 변화를 활용하여 고객의 경쟁력을 높이는 데 기여한다.&lt;/li&gt;
    &lt;li&gt;동작하는 소프트웨어를 몇 주에서 몇 개월 단위로 자주 전달한다. 가능한 한 전달주기를 짧게 한다.&lt;/li&gt;
    &lt;li&gt;비즈니스 담당자들은 프로젝트 기간 내내 매일 개발자와 함께 일한다.&lt;/li&gt;
    &lt;li&gt;프로젝트는 동기가 부여된 개인들로 구성한다. 그들이 필요로 하는 환경과 지원을 제공하고 프로젝트가 완료될 때까지 믿고 맡긴다.&lt;/li&gt;
    &lt;li&gt;개발팀 내에서 정보를 전달하는 가장 효율적이고 효과적인 방법은 얼굴을 마주보고 대화하는 것이다.&lt;/li&gt;
    &lt;li&gt;프로젝트의 진척도를 가늠하는 가장 기본 요소는 동작하는 소프트웨어다.&lt;/li&gt;
    &lt;li&gt;애자일 프로세스들은 지속 가능한 개발을 이끈다. 투자자, 개발자, 사용자들은 일정한 개발속도를 계속 수용할 수 있어야 한다.&lt;/li&gt;
    &lt;li&gt;기술적인 탁월함과 좋은 설계에 대한 지속적인 관심은 기민함을 높인다.&lt;/li&gt;
    &lt;li&gt;단순함, 즉 하지 않아도 될 일은 최대한 하지 않아야 한다.&lt;/li&gt;
    &lt;li&gt;최선의 아키텍처, 요구사항, 설계는 스스로 조직화되는 팀에서 나온다.&lt;/li&gt;
    &lt;li&gt;개발팀은 정기적으로 일을 어떻게 하는 것이 더 효과적인지 되돌아보고 그에 맞추어 일하는 방식을 조율하고 바로 잡는다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일-격변기&quot;&gt;애자일 격변기&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 코치는 (중략) 기업들의 어떤 부분이 비효율적인지 가시화하고 이해할 수 있게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제를 가시화하는 것은 중요하다. 해결 방안을 모색하는 출발점이 되기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 프로세스는 팀 구성원이 단합하고 공동의 목표를 갖도록 한다.  (중략) 피드백 루프 매커니즘을 제공하여 어느 때나 문제에 대응하고 적응할 수 있도록 해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일-행오버&quot;&gt;애자일 행오버&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;화이트보드에 포스트잇이 얼마나 많이 붙어 있느냐가 애자일 전환의 척도, 즉 얼마나 기민해졌느냐를 재는 기준이 되었다. 포스트잇이 많을수록 더 애자일 스럽게 일하고 생각한다. 애자일에 숙력된 기업들이 포스트잇을 색상과 크기에 따라 서로 다른 의미를 부여하여 잘 활용하고 있는 것은 사실이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;부분적인-전환&quot;&gt;부분적인 전환&lt;/h5&gt;

&lt;p&gt;이 부분에서는 애자일로 전환이 효과가 없었던 기업의 원인으로  ‘부분적인 전환’을 꼽는다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 프로젝트에서 &lt;strong&gt;가장 중요한 결과물이 소프트웨어 자체&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘개발자들은 이미 훌륭하고 절차만 개선하면 된다’ 는 단편적인 가정으로 사람들에 대한 기술적인 훈련에는 큰 관심을 두지 않고 절차만 개선하고, 기존의 똑같은 개발자, 똑같은 습관을 가진 사람들이 갑자기 멋진 소프트웨어를 만들기 시작할 것이라 믿는다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 단계마다 피드백이 있다는 전제에서만 절차의 개선으로 제품이 나아진다. 피드백 시스템이 동작하려면 자기가 하는 일에 충분히 주의를 기울이고 뭔가 잘못되고 있거나 더 나은 방법이 있다고 느낄 때 자기 목소리를 내는 재능 있고 프로페셔널한 사람들이 있어야 한다. 절차에만 집중하고 소프트웨어 개발을 공장 라인처럼 취급하면, 그저 시키는 일만 하고 출퇴근하는 공장 노동자와 다를 바 없는 개발자들만 생긴다. 이렇게 되면 비효율적인 피드백 시스템이 되어 전체 프로젝트에 해를 끼친다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일의 배경이 되는 기본 원칙은 기술적 탁월함이다. 애자일의 모든 절차들에는 기술적 탁월함이 전제되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;애자일-코치&quot;&gt;애자일 코치&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;궁극적인 질문은 ‘애자일 전환이 개발자의 역량 향상에 얼마나 도움이 되었는가?’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;소프트웨어-프로젝트를-바라보는-편협한-시각&quot;&gt;소프트웨어 프로젝트를 바라보는 편협한 시각&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;기술을 이해하지 못하는 사람들이 의사 결정을 하는 것은 프로젝트를 재앙으로 이끄는 지름길이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일과-소프트웨어-장인-정신&quot;&gt;애자일과 소프트웨어 장인 정신&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일은 조직과 비즈니스에 새로운 사고방식을 제공한다. 애자일 방법론들은 가치에 따라서 일을 이해하고, 우선순위를 정하고, 관료주의와 낭비를 줄이고, 사람들에게 권한이양과 동기부여를 하고, 피드백 루프를 만들어 준다. 이것은 기업의 반응속도를 높이고 기민하게 하며, 기업이 &lt;strong&gt;올바른 일&lt;/strong&gt;을 하도록 돕는 것이다. 소프트웨어 정신은 개발에 있어서의 프로페셔널리즘이다. 소프트웨어 장인정신은 소프트웨어 개발자로서 일을 더 잘하기 위해 가슴에 품는 일종의 이념이다. (중략) 개발자와 기업들이 &lt;strong&gt;일을 올바르게 수행&lt;/strong&gt;하도록 돕는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;요약&quot;&gt;요약&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;기업이 경쟁력을 유지하려면 소프트웨어를 빨리 개발하면서도 더 나은 품질을 유지할 수 있어야 한다. 애자일 소프트웨어 개발은 피드백 루프를 짧게 하고 변화와 고객의 요구에 빠르게 대응할 수 있는 기회를 준다. 많은 기업들이 애자일의 절차적인 부분에는 많은 관심을 기울이고 있지만 기술적 실행 관례에 대해서는 완전히 무시하고 있는 것이 현실이다.&lt;/p&gt;

  &lt;p&gt;애자일 매니페스토에서는 분명하게 ‘절차와 도구보다는 개성과 화합을’ 중요시 함을 선언하고 있지만, 애자일 전환은 온통 절차와 도구로 끝나 버린다. 스크럼을 도입하고, 스탠딩업 미팅을 하고, 백로그 관리툴을 사용하는 것만으로 갑자기 소프트웨어의 품질이 더 좋아지거나 개발자들의 역량이 높아질 수는 없다. 기술적 탁월함의 개선 없이 절차만 개선하는 것은 무의미하다.&lt;/p&gt;

  &lt;p&gt;완전한 애자일 전환을 위해서는 프로페셔널 소프트웨어 개발자들이 필요하다. 이들은 기술적 실행 관례, 기술적 전문성 그리고 관련 도구들을 마스터하고 있어야 한다. 정기적으로 계속해서 배포되는 소프트웨어에 대해서도 높은 품질을 유지시키며, 완벽하게 테스트되고 쉽게 변경할 수 있는 소프트웨어를 개발할 수 있어야 한다. 완전한 애자일 전환을 위해서는 기업들이 소프트웨어 장인정신을 품어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3개월 후, 6개월 후, 1년 후에 읽으면 지금보다 좀 더 깊은 시각으로 바라보고 또 다른 생각을 할 수 있을 거라 기대한다. 나중에 또 곱씹어서 읽어야지.&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;

&lt;p&gt;산드로 만쿠소 저, 권오인 옮김, 소프트웨어 장인, 길벗, 2015.09.25&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/LuckyYoWu/ss-70771827&quot;&gt;개발자가 되기전 누군가 알려주면 좋았을 모든 것들, 유용우&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.facebook.com/woowahanTech/posts/2093259717581289&quot;&gt;우아한형제들 CTO 김범준이 추천하는 개발 도서&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="TIR" /><category term="소프트웨어 장인" /><category term="애자일" /><summary type="html"></summary></entry></feed>