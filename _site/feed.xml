<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-17T07:16:48+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">오늘의 공기</title><subtitle>오늘의 공부 기록</subtitle><entry><title type="html">부스트캠프 멤버쉽 2주차 회고</title><link href="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EB%A9%A4%EB%B2%84%EC%89%BD-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="부스트캠프 멤버쉽 2주차 회고" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84%20%EB%A9%A4%EB%B2%84%EC%89%BD%202%EC%A3%BC%EC%B0%A8%20%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EB%A9%A4%EB%B2%84%EC%89%BD-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/">&lt;p&gt;1주 차에 구현했던 회원가입 / 로그인의 백엔드 구현이 이번 주 미션이었다. express를 사용하였고, 클라이언트의 요청에 JSON으로 적절한 응답을 하는 서버를 구현했다. 졸업작품에서 서버 구현을 한 얕은 경험이 있었고, 프론트엔드 구현보다 심리적 부담감이 덜 했다. (또, 끝나면 꿀 같은 연휴가 기다리고 있었다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;미션-분석&quot;&gt;미션 분석&lt;/h3&gt;

&lt;p&gt;팀 빌딩을 하고 미션을 분석했다. 월요일 미션분석 시간에는 저번 주처럼 무얼 구현해야 하나 조금 막막했다. 팀원들과 이야기를 나누고, 리스트를 작성해보았지만 부족했다. 지나가던 훌륭한 동료 바질토스트님을 붙잡고 의견을 구했고, 나에게 쿠키와 세션에 대한 지식을 공유해주었다. 덕분에 마스터 클래스 수업을 이해하는 데 도움이 됐다.&lt;/p&gt;

&lt;p&gt;pug를 사용하는 요구사항(선택)이 있어서 갓혁우님에게 아직 프론트에 라우팅 기능을 구현하지 않았는데, 렌더링을 백엔드에서 하는 게 좋을까 프론트엔드에서 구현하는 게 좋을까 물어보았다. 각각의 장단점이 있다며 자세한 설명을 들을 수 있었다. 다음 글에도 자세히 나와 있다&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;[https://velog.io/@zansol/%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-%EC%84%9C%EB%B2%84%EC%82%AC%EC%9D%B4%EB%93%9C%EB%A0%8C%EB%8D%94%EB%A7%81SSR-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%82%AC%EC%9D%B4%EB%93%9C%EB%A0%8C%EB%8D%94%EB%A7%81CSR](https://velog.io/@zansol/확인하기-서버사이드렌더링SSR-클라이언트사이드렌더링CSR)&quot;&gt;[주니어탈출기] 서버사이드렌더링(SSR) &amp;amp; 클라이언트사이드렌더링(CSR)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;지난주에는 막막했는데, 이번 주는 어찌어찌할 수 있을 것 같다는 자신감이 들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마스터-클래스&quot;&gt;마스터 클래스&lt;/h3&gt;

&lt;p&gt;지난주보다 자리가 앞으로 이동했고, 덕분에 마스터 클래스 집중력이 올라갔다. 마스터 클래스에서는 네트워크에 대한 전반적인 내용에 들을 수 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크란 뭘까?&lt;/li&gt;
  &lt;li&gt;웹&lt;/li&gt;
  &lt;li&gt;Web Client와 Server&lt;/li&gt;
  &lt;li&gt;HTTP
    &lt;ul&gt;
      &lt;li&gt;동작 방식 및 특징&lt;/li&gt;
      &lt;li&gt;Request / Response 메시지 구조&lt;/li&gt;
      &lt;li&gt;METHOD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URL&lt;/li&gt;
  &lt;li&gt;TCP의 3way handshake&lt;/li&gt;
  &lt;li&gt;세션과 쿠키&lt;/li&gt;
  &lt;li&gt;Node.js
    &lt;ul&gt;
      &lt;li&gt;Node.js가 왜 필요할까?&lt;/li&gt;
      &lt;li&gt;학습 방법&lt;/li&gt;
      &lt;li&gt;비동기 처리 메커니즘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;express의 미들웨어와 동작 원리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;말로 표현할 수 없을 만큼 &lt;mark&gt;재밌고&lt;/mark&gt; 유익한 시간이었다. 이번 미션 구현에 있어 문제 정의 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP는 Stateless이기 때문에 어떻게 사용자를 식별할 것인가&lt;/code&gt;와 그 문제에 대한 해결법 &lt;code class=&quot;highlighter-rouge&quot;&gt;쿠키와 세션&lt;/code&gt;에 대한 접근법에 대해 큰 힌트를 얻을 수 있었다. 그리고 책이나 동영상, 읽어볼 글들 같은 꿀팁을 몇 개 얻었다. 깊은 감명을 받아 꼭 체화하고 싶은 내용을 뽑아 보자면,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Leaky_abstraction&quot;&gt;추상 누출 원리 (Leaky Abstraction)&lt;/a&gt;에 따라, 좀 더 뛰어난 엔지니어가 되기 위해서 로우 레벨의 기반 지식이 필요하다.&lt;/li&gt;
  &lt;li&gt;공식 문서를 읽는 건 굉장히 좋은 습관 중의 하나이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1번은 처음 듣는 용어라 생소했다. 그리고 앞으로 추구하고 싶은 방향이었다. 눈에 잘 보이는 곳에 적어두고, 적어도 내가 사용하는 기술에 대해서 그 기반 지식까지 알도록 노력하고 싶다. 2번은 공식 문서를 읽는 습관을 들이는 시발점이 되었으면 좋겠다. 그동안, 닮고 싶은 멋진 사람들에게 공식 문서에 대해 여러 번 들어왔던 터라 이제는 나도 공식 문서를 읽는 습관을 만들 때가 되었다. 공식 문서와 관련된 내용은 아래에 다시 적어야겠다.&lt;/p&gt;

&lt;h3 id=&quot;나름의-이번-주-전략&quot;&gt;나름의 이번 주 전략&lt;/h3&gt;

&lt;p&gt;또 첫 주차에 HTML과 CSS에 굉장히 힘들었던 터라, 이번 주에는 미션에서 요구하는 최소한의 기능을 구현하고 그 후에 무언가를 더 해볼 생각이었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일단 돌아가는 최소한의 기능을 구현하자. 그리고 욕심을 부리자&lt;/li&gt;
  &lt;li&gt;구글링보다는 공식문서를 먼저 살펴보자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;계획&quot;&gt;계획&lt;/h3&gt;

&lt;p&gt;일단 피처를 도출했다는 점에서 저번 주보다 발전했지만, 여전히 부족했다. 나만 이해할 수 있는 피처였고, 세부적인 면에서 아쉬웠다. 그래서 피처를  일별로 나누는 데 어려움이 있었다.&lt;/p&gt;

&lt;p&gt;그래서 나는 당일 &lt;code class=&quot;highlighter-rouge&quot;&gt;여기까지 해야지!&lt;/code&gt; 하고 당일 하고 싶은 일을 당일에 유동적으로 정했다. 아직 내 학습 속도와 개발 속도를 파악이 덜 돼, 계획을 나누어 분배하는 게 조금 낯설다. 다음 주에는 조금 더 피처를 세부적으로 도출해 5일로 나누어 계획해보고 싶고, 각각의 시간을 재보고 싶다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;공부-설계-개발&quot;&gt;공부, 설계, 개발&lt;/h3&gt;

&lt;p&gt;express로 백엔드를 구현할 때, 구글링보다 공식 문서를 읽어보고 개발했다. URI를 설계하고, 로그인이나 회원가입 API를 구현하는 데 큰 어려움은 없었다. 로그인 세션을 구현하려면 클라이언트 렌더링하므로, 미완이었던 클라이언트를 구현해야 했다.  클라이언트에서 fetch를 사용해 서버에 요청하는 부분도 클라이언트의 몫이었다. 나는 프론트엔드라는 거대한 산에 놓였고, 다시 곤경에 처했다.&lt;/p&gt;

&lt;p&gt;친구가 옆에서 미션하는 내 모습을 보며 던진 두 마디가 있다.&lt;/p&gt;

&lt;p&gt;1) 왜 라이브 서버로 띄어?&lt;/p&gt;

&lt;p&gt;2) 희라야 SPA가 뭔지 먼저 알아야 하지 않을까?&lt;/p&gt;

&lt;h5 id=&quot;왜-라이브-서버로-띄어&quot;&gt;왜 라이브 서버로 띄어?&lt;/h5&gt;

&lt;p&gt;express - generator로 express를 생성하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;이라는 폴더가 있다. 이 폴더 안에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;javascripts&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stylesheets&lt;/code&gt; 디렉터리로 다시 나뉘는데 그 당시 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;이 public 폴더가 왜 존재할까?&lt;/code&gt; 는 의문이 없었다. 그리고 express의 정적파일이 뭘까? 궁금해하지 않았다. express 홈페이지에 다음과 같이 나와 JSON으로 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://expressjs.com/ko/starter/static-files.html&quot;&gt;Express에서 정적 파일 제공&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;정적 자산이 포함된 디렉토리의 이름을 &lt;code class=&quot;highlighter-rouge&quot;&gt;express.static&lt;/code&gt; 미들웨어 함수에 전달하면 파일의 직접적인 제공을 시작할 수 있습니다. 예를 들면, 다음과 같은 코드를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;이라는 이름의 디렉토리에 포함된 이미지, CSS 파일 및 JavaScript 파일을 제공하십시오.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;정적파일.. 음.. 그래..&lt;/code&gt;하며 넘어갔었다. 그래서 클라이언트에서 통신을 테스트할 때, 웹스톰의 라이브 서버로 띄우고.. 거기서.. localhost에 열심히 요청했다. 이런 구조라면 웹페이지를 띄어주는 웹서버와 API 서버가 따로 필요했다. 실은 아직도 정적 파일에 대해 잘 이해하지 못했다. 검색해도 가려운 곳을 시원하게 긁어주는 그런 해답을 얻지 못했다. 아직 파고드는 공부가 부족하다는 걸 느낀다.&lt;/p&gt;

&lt;h5 id=&quot;희라야-spa가-뭔지-먼저-알아야-하지-않을까&quot;&gt;희라야, SPA가 뭔지 먼저 알아야 하지 않을까?&lt;/h5&gt;

&lt;p&gt;fetch를 사용해 클라이언트와 서버 사이의 통신 문제를 해결하고 나서, 로그인 세션을 구현하기 위해 SPA를 구현하려 할 때 들었던 말이다. vanila JS로 SPA를 구현하는 검색어를 마구잡이로 조작하고 있었고 속으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;음.. 이게 뭐람..&lt;/code&gt; 이러고 있었는데, 친구가 툭 던진 한마디로 &lt;code class=&quot;highlighter-rouge&quot;&gt;아 뭔지도 제대로 알지 못한 상태에서 구현부터 하려고 했네&lt;/code&gt; 그동안 스스로 문제 해결하려는 과정에서 무엇이 문제였는지 큰 깨달음을 얻었다. 나는 계속 베이스가 없이 위에 무언가를 쌓으려고 하고 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그리고-또-&quot;&gt;그리고 또 ..&lt;/h3&gt;

&lt;p&gt;디자인패턴을 8주 차를 마지막으로 끝났다. 존경하는 갓 JS님께 내가 이렇게 구현을 했는데, 이게 정말 맞을까?! 의견을 구했다. 그리고 내가 작성한 코드가 잘못됐다는 걸 알게 되었다. 의도(?)와 다르게, 코드를 분리해서 얻는 별다른 이점(코드의 재사용, 의존성 분리)이 없었다. 갓 JS님의 주옥같은 몇 마디를 덧붙이자면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 게 추상화가 되는 대상인지를 알아야 하는데, 그러려면 잘못된 코드를 많이 짜보는 수밖에 없어. 베이스가 없는데 쌓으려고 해 위에 안 쌓여. 나쁜 코드를 짜봐야 해. 나쁜 코드를 짜봐야 이걸 이렇게 바꿨을 때 어떤 이점이 있는지. 일단 기능 단위로 작게 작게 짜봐.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그동안 코드를 짜면서 ‘한 번에 좋은 코드를 짜야지’라는 허황된 생각이 있었다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;나중에 이런 기능도 추가하려면 처음부터 잘 짜야 해! &lt;/code&gt; 라는 잘하고 싶은 욕심이  잘해야한다는 부담감을 동반했고.  아직 경험이 없는 나에게 그런 생각과 그런 욕심들은 기대한 좋은 아웃풋과는 거리가 멀뿐더러 생산성이 떨어지기까지 한다는 걸 일깨워줬다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;나쁜 코드를 짜봐야 한다&lt;/code&gt;는 말이 여러 부담감을 덜어주었다. 우아한 코드는 대부분 경험을 통해 나오나 보다. 경험을 쌓으면서 흥미를 잃지 않고 알아가는 즐거움을 느끼면서 하고 싶다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;스크럼--그룹-코드-쉐어--피어-세션&quot;&gt;스크럼 / 그룹 코드 쉐어 / 피어 세션&lt;/h3&gt;

&lt;p&gt;이번 주에는 스크럼에서 내 진행 상황과 계획을 잘 말할 수 있었지만, 팀원분들과 소통이 조금 아쉬웠다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;어디까지 진행됐고, 무엇을 할 것인가&lt;/code&gt; 가 나만 겪는 문제는 아니었나 보다. &lt;code class=&quot;highlighter-rouge&quot;&gt;도울 게 있나요?&lt;/code&gt; 라고 물어도 돌아오는 답은 시원하지 않았다. 어떻게 하면 조금 더 알차게  스크럼을 진행할 수 있을까? 고민이다. 다른 동료들에게 스크럼 어떻게 진행하냐고 많이 물어봐야겠다.&lt;/p&gt;

&lt;p&gt;코드쉐어는 각자의 진행 상황이 다 달라서 공유하는 시간을 갖지 못했다. 다음 주는 더 적극적으로 코드 쉐어하는 시간을 가지도록 해야겠다.&lt;/p&gt;

&lt;p&gt;피어 세션은 저번 주와 같이 시간이 부족해서 마지막 분의 코드를 제대로 보지 못했다. 주어진 시간 90분 동안 4명이 진행하려면, 5일 동안의 아웃풋을 약 20분으로 압축해서 이야기를 나누어야 한다. 전날 미리 같이 피어 세션을 진행하시는 분들의 브랜치를 보고 오면 좋겠다고 일단 바라본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마스터-클래스-1&quot;&gt;마스터 클래스&lt;/h3&gt;

&lt;p&gt;코드 리뷰, Git 커밋 메시지, 스타일 가이드, 테스트와 배포에 대한 내용이었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://soojin.ro/blog/google-code-review-guide&quot;&gt;코드 리뷰에 대한 가이드&lt;/a&gt; 중에서 인상 깊었던 구절을 적어보자면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;코드 리뷰를 통해서 개발자들은 언어나 프레임워크, 소프트웨어 디자인에 대해 새로운 것을 배운다. 지식과 경험을 나누면 코드 품질이 점점 좋아진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;함께 자라기가 목표인 지금, 시간 내서 동료들과 꼭 코드 리뷰를 해보고 싶다!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대화 내용은 미래 개발자들을 위해 반드시 댓글로 남긴다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;주석이 명료하고 도움이 되는가? 정말 필요한 주석만 있는가? 유용한 주석은 코드가 어떤 일을 하는지가 아니라 왜 존재하는지를 담고 있다. 코드만 봐서 어떤 일을 하는 건지 이해가 안 된다면 코드를 더 간단하게 고쳐야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇지 않으면 리뷰어가 코드를 보고 스스로 깨달아야 한다고ㅋㅋㅋ &lt;mark&gt;상대방이 망설이는 코드를 짜지 않는 게 좋다&lt;/mark&gt;는 말씀이 인상 깊었다. 메모📝. 눈에 잘 보이는 곳에 적어두고 코딩하고 나서, 정말 그렇게 코드를 작성했는가? 항상 고민하고 싶다. 앞으로 일을 하면서도 계속해야 할 일이니, 지금부터 체화해보자.&lt;/p&gt;

&lt;p&gt;또 한 가지 인상 깊었던 마스터님의 말씀이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;좋은 코드는 많이 읽는 게 좋아요. 좋은 글을 쓰려면 많이 읽고 많이 써봐야 해. 
개발자는 많이 쓰기만 하고 많이 읽지 않아.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;챌린지 때는 몇 번 읽었지만, 멤버십 과정을 하면서 미션을 완수하지 못해서 다른 사람을 코드를 읽지 않았다. 흑흑.. 이 거부감도 언제쯤이면 사라지겠지.. 다음 미션에서는 의도적으로 자기 전에 사람들의 PR을 훑어보고 자야겠다. 코드는 많이 읽자.&lt;/p&gt;

&lt;p&gt;커밋 메시지에 관한 이야기 중 다음 주에 내가 개선해야 할 점은 다음과 같다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;제목과 본문을 한 줄 띄워 분리하기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;본문은 어떻게 보다 &lt;strong&gt;무엇을, 왜&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또 한 가지 인상적인 내용이 있는데.. 미래의 내가 보려고 회고를 작성하는 나로서는 공감이 됐다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;커밋 메시지는 다른 개발자, 미래의 나를 위한 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그 외 테스트 코드 / 배포에 관한 이야기를 하셨다. 아직 테스트 코드를 작성하기엔 너무 버거운 것 같다. 다다음 미션쯤이면 테스트 코드를 작성할 수 있지 않을까?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;스스로를-칭찬해보자&quot;&gt;스스로를 칭찬해보자&lt;/h3&gt;

&lt;p&gt;혼자 해결하기 어려운 고민은 동료들에게 적극적으로 의견을 구했고, 누군가 어려워하고 있을 때 내가 알고 있는 선에서 적극적으로 도왔다. 지난주의 아쉬움에 대한 피드백이 긍정적으로 개선되어서 기쁘다.&lt;/p&gt;

&lt;p&gt;fetch와 관련해 용호님의 도움을 받았고, 무엇을 해야 할지 막막할 때와 서버 렌더링과 프론트 렌더링에 대한 내용은 혁우님에게 도움을 받았다. 쿠키와 세션은 준표님과 이야기를 나누었고, 디렉터리 구조와 코드 개선에서 성동님이 도움을 주셨다. 관훈님이 배포를 도와주셨다. 마지막으로 동아리 선배 지수님은 양질의 이야기들을 공유해주셨다.&lt;/p&gt;

&lt;p&gt;그리고 여러 사람에게 나름 도움을 주었다. 그분들에게 정말 도움이 되었을까? 묻는다면 자신은 없지만, 앞으로도 누군가에게 내가 할 수 있는 것이라면 기꺼이 돕고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;반성해보자&quot;&gt;반성해보자&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;집중력이 부족했다. 집중력을 저하하는 요소를 줄여보자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주중의 약속은 피해야겠다. 만나서 밥만 먹는 건 괜찮지만, 일단 만난다는 자체에 심리적 부담이 느껴지는 순간들이 있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;조금 더 잘할 수 있지 않았나&lt;/code&gt; 아쉬움이 드는 한 주였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다음-미션에서-도전해보자&quot;&gt;다음 미션에서 도전해보자&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;피처를 세부적으로 적어보자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;동료들의 코드를 더 많이 읽어보자.&lt;/li&gt;
  &lt;li&gt;코어 타임에 집중해보자.&lt;/li&gt;
  &lt;li&gt;내 언어로 설명할 수 있을 만큼 충분히 공부하자.&lt;/li&gt;
  &lt;li&gt;크롬 개발자 도구를 좀 더 적극적으로 사용해보자.&lt;/li&gt;
  &lt;li&gt;공식문서를 하루에 30분씩이라도 시간내서 읽어보자.&lt;/li&gt;
  &lt;li&gt;공부와 설계/ 개발에 걸린 시간을 재보자&lt;/li&gt;
  &lt;li&gt;커밋 메세지의 본문을 &lt;strong&gt;무엇을, 왜&lt;/strong&gt; 중점으로 작성해보자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;--공식-문서를-읽는-습관을-들여보자&quot;&gt;&lt;mark&gt;  공식 문서를 읽는 습관을 들여보자! &lt;/mark&gt;&lt;/h3&gt;

&lt;p&gt;전에 동아리 선배가 했던 공식문서를 처음부터 끝까지 쭉 읽어나가며 공부한다는 말을 들었다. 습관을 들이고 싶은데 영어로 된 문서를 시간을 내서 읽는다는 게 어려운 것 같다. 나도 따라 해보고 싶은데 영어로 된 페이지를 모니터로 보고 있자니 해석도 잘 안 되고 눈이 빠질 것 같고 그랬다. 동아리 단톡방과 대철님께 물어봤다&lt;/p&gt;

&lt;p&gt;동아리 선배&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점심 먹고 집중 안 될 때, 어차피 이 시간에 다른 일 해봤자 안 하느니 못한다는 편한 생각으로 30분씩 프린트해서 읽어. 읽다가 막히는 거 읽으면 번역기 세 개 (카카오 번역/ 구글 번역/ 파파고) 다 돌려본 다음 다시 읽고, 뜬금없는 건 블레임을 열어서 ‘이 부분 왜 추가했나?’ 이슈 따라가서 같이 보면 도움이 됐어. 귀찮은 일이라 시간을 정해놓고 하지 않으면 안 하게 되더라. 내가 사용하는 기술들의 레퍼런스는 다 읽어보자는 주의인데, 어차피 매일 읽어도 못 따라가. 레퍼런스 읽는 걸 선호하는 이유는 첫째로, 일단 문제를 만났을 때 사고의 폭이 다르다는 걸 경험했는데, 예를 들어 &lt;strong&gt;문제를 만남 &amp;gt; 1도 모르겠네 &amp;gt; 구글링 &amp;gt; 삽질 &amp;gt; 구글링 &amp;gt; 삽질&lt;/strong&gt;이었다면, &lt;strong&gt;문제를 만남 &amp;gt; 이거 어디서 봤는데&lt;/strong&gt; 가 돼서 좋았고, 두 번째는 레퍼런스는 이걸 읽는 사람이 아무것도 모르는 상태라고 가정하고 써놨기 때문에 굉장히 많은 사전지식이 들어 있어서 개념 잡는 데 좋았어.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대철님도 &lt;code class=&quot;highlighter-rouge&quot;&gt;문제를 만남 &amp;gt; 이거 어디서 봤는데&lt;/code&gt;가 되어서 좋다고 하셨다. 또 사라질 기능에 취소선이 그어져서 미리 알 수 있다고 하셨다.&lt;/p&gt;

&lt;p&gt;공식 문서를 안 읽을 이유도 없고, &lt;strong&gt;지금이 습관 들이기 좋은 기회&lt;/strong&gt;인 것 같다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;에필로그---나는-추석을-어떻게-보냈나--추석-동안-했던-생각들&quot;&gt;에필로그 - 나는 추석을 어떻게 보냈나 + 추석 동안 했던 생각들&lt;/h4&gt;

&lt;p&gt;조금은 lazy하고···.리프레시의 기간을 가졌다. 이번 미션을 진행하는 한 주 동안 추석 때 할 리스트를 쭉 작성했지만···. 큼큼···. 평소에 못 읽었던 책 좀 읽고, 고잉님의 HTML, CSS 강의를 듣는 것만으로도 시간이 다 지나버렸다.&lt;/p&gt;

&lt;p&gt;하고 싶은 공부를 잔뜩 적어놓고, 막상 개발과 동떨어진 책을 읽으며 여유롭게 연휴를 지내고 나니 ‘공부도 해야 하는 데?!’  약간의 고민과 동시에 편한 마음이 들었다.&lt;/p&gt;

&lt;p&gt;무엇이든 적정선을 찾는 게 쉬운 일은 아니다. 수영과 일상, 진로와 개발, 내가 좋아하는 것과 앞에 놓인 과제. 뭐든지  잘하고 싶고, 여유롭기까지 하고 싶은데.. 지금의 시기에는 이런 바람이 어렵지 않나···. 우선순위를 정하고 적당히 분배해야겠다.&lt;/p&gt;

&lt;p&gt;좀 더 잘할 수 있지 않았나 아쉬움이 드는 한 주를 돌아보면, 조금 더 할 수 있지만, 어떤 이유들로 하지 않았던 순간들이 있었다. 공부도 불안함과 조급함 그리고 즐거움과 재미/ 부정적인 마음과 긍정적인 마음 사이의 적정선이 필요한 것 같다. 그런데도 긍정적으로 생각해보자면 어제보다 더 많은 개발 지식을 알아가는 자신이 기특하다.&lt;/p&gt;

&lt;p&gt;마지막으로, 앞으로 삽질을 조금 덜 하길 바라면서···. 이제는 무얼 모르는지 더 빨리 인지하고, 패닉에서 조금 더 빨리 빠져나올 수 있을 것 같은 자신감이 든다. 그리고 베이스 없이 계속 무언가를 쌓으려고 하는  문제를 알게 되어 감사를 느낀다. 다음 미션은 좀 더 잘해보자!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="회고" /><category term="부스트캠프" /><summary type="html">1주 차에 구현했던 회원가입 / 로그인의 백엔드 구현이 이번 주 미션이었다. express를 사용하였고, 클라이언트의 요청에 JSON으로 적절한 응답을 하는 서버를 구현했다. 졸업작품에서 서버 구현을 한 얕은 경험이 있었고, 프론트엔드 구현보다 심리적 부담감이 덜 했다. (또, 끝나면 꿀 같은 연휴가 기다리고 있었다)</summary></entry><entry><title type="html">부스트캠프 멤버쉽 1주차 회고</title><link href="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EB%A9%A4%EB%B2%84%EC%89%BD-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="부스트캠프 멤버쉽 1주차 회고" /><published>2019-09-03T00:00:00+09:00</published><updated>2019-09-03T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84%20%EB%A9%A4%EB%B2%84%EC%89%BD%201%EC%A3%BC%EC%B0%A8%20%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EB%A9%A4%EB%B2%84%EC%89%BD-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/">&lt;p&gt;부제 - tmi.. 미래의 내가 보려고 쓰는 회고..&lt;/p&gt;

&lt;h2 id=&quot;나는-무엇을-하였나&quot;&gt;나는 무엇을 하였나&lt;/h2&gt;

&lt;p&gt;멤버쉽의 첫 주는 정말 정신없이 지나가서 회고하면서도 ‘한 주 동안 내가 무엇을 했더라..’ 표현하기가 힘들다. 자신도 설명 못 하는 한 주를 보냈다는 느낌은 긍정적이지 못한 신호같았다. 주도적으로 시간과 계획을 컨트롤하지 못했고, (애초에 명확한 계획을 세우지 못했다) 결국 나는 모든 요구사항을 구현하지 못했다. 구체적인 계획을 세우지 않고 유동적으로 미션을 해결하겠다는 계획은 실패했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;미션-분석&quot;&gt;미션 분석&lt;/h3&gt;

&lt;p&gt;기능 요구 사항과 기획서가 주어졌고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Day 1&lt;/code&gt; 에 오전에 2시간동안 팀원들과 함께 분석했다. 나름대로 기능이 있는 HTML과 CSS는 구현은 처음이었고, 제대로 feature list를 도출하지 못했다. 무엇을 해야 할지에 대해 전체적으로 갈피를 잡지 못했다. 지금 돌이켜 생각해보면, 주변의 동료들과 소통을 좀 더 했더라면 더 원활하게 시작할 수 있지 않았을까? 아쉽게도 당시 나는 무얼 모르는지도 모르는 상태였다. 본인이 뭘 모르는지도 모르는데, 누군가에게 질문한다는 것 자체가 잘못됐다고 생각했다. 동시에 스스로 해결할 수 있을 거라 기대했다. 하지만 주변 동료들과 미션에 대한 이야기를 나누다 보면 어떻게 해야 할지 감을 잡아 더 좋은 아웃풋을 낼 수 있었을지도 모른다. 동료학습이라는 걸 기억하자&lt;/p&gt;

&lt;h6 id=&quot;고민했던-것들&quot;&gt;고민했던 것들&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;요구사항이 있는데 어떻게 해야 하지? 무엇부터 해야 하지? 공부부터 해야 하나? 이 기능을 구현하려면 어떤 걸 공부해야지? 어떻게 하면 최선의 방법으로 할 수 있을까? TDD 이야기가 나왔는데 한 번 해볼까? (욕심만 많은 타입) 공부 시간은 어떻게 확보하지? 구현하면서 검색하며 공부할까? 공부하고 짜볼까?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문제 : 어떻게 하지? 고민만 하며  &lt;code class=&quot;highlighter-rouge&quot;&gt;모르겠다~&lt;/code&gt; 하며 넘겨버렸다. (…)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;목표&quot;&gt;목표&lt;/h3&gt;

&lt;p&gt;이번 미션에서 마스터님은 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간 관리에 대한 의도적 학습&lt;/code&gt;을 훈련하길 바라셨다.&lt;/p&gt;

&lt;p&gt;나는 마스터님의 바람보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;즐기면서 하자&lt;/code&gt;에 초점을 맞추었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;계획&quot;&gt;계획&lt;/h3&gt;

&lt;p&gt;대략 내 계획은 이러했다. 전체적인 계획이 없었고, 날마다 뜬구름을 잡았으며, 매일 지켜지지 못했고, 하루가 지날수록 큐에 쌓여갔다.&lt;/p&gt;

&lt;h6 id=&quot;day-1에-세웠던-계획&quot;&gt;day 1에 세웠던 계획&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;day 1 : 요구 사항 정리 : 요구사항 정리 -&amp;gt; 아키텍처 -&amp;gt; 스켈레톤 코드 작성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;day 2 - day 5 : 무계획&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;day2에-세웠던-계획&quot;&gt;day2에 세웠던 계획&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;sequence diagram 작성해보기&lt;/li&gt;
  &lt;li&gt;아키텍처를 어떻게 구성하지 ?&lt;/li&gt;
  &lt;li&gt;html, css는 답이 없다. 로직부터 하자. 절반은 구현하자.&lt;/li&gt;
  &lt;li&gt;day 3에는 spa를 구현하고 나머지 로직을 구현하자&lt;/li&gt;
  &lt;li&gt;day 4 - day 5 : 무계획&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;day4에-세웠던-계획&quot;&gt;day4에 세웠던 계획&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;일단 html 다하고 로직부터 작성하자 (→ 유일하게 지켜짐)&lt;/li&gt;
  &lt;li&gt;일단 기획서에 있는 최대한을 해보자&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;지난-한-주-계획의-문제점&quot;&gt;지난 한 주 계획의 문제점&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;구체적이지 못했다. (= 그냥 계획이 없었다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;당일 세운 계획을 지키지 못했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;남은 일정과 내 능력치를 고려하지 못했다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;개선해보자&quot;&gt;개선해보자&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;feature list를 구체적으로 작성한다.&lt;/li&gt;
  &lt;li&gt;요구사항을 구현하기 위해 어떤 개념들을 알아야 하는지 확실히 짚어두자
    &lt;ul&gt;
      &lt;li&gt;공부 시간을 충분히 확보한다. (이번 주의 삽질은 7할은 제대로 공부하지 않아서 ..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;나름 세부적인 계획을 세우자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;공부---나는-왜-러닝-커브가-높았을까&quot;&gt;공부 - 나는 왜 러닝 커브가 높았을까&lt;/h3&gt;

&lt;p&gt;뜬구름 잡는 공부를 했다. 구현하면서 야금야금 검색하며 공부하는 방법을 처음에 택했다가, 어떤 개념도 제대로 소화하지 못했다. 공부하면 할수록 DOM tree와 수많은 태그, CSS가 무시무시해졌다. 즐기면서 하고 싶은데, 아웃풋은 나오지 않고, 모르겠다는 상황이 반복됐다.&lt;/p&gt;

&lt;p&gt;지난 한 주간 정말 집중력이 부족했던 것도 한몫했다. 덕분에 차분히 이해하거나, 왜 그럴까 파고드는 게 어려웠다.  예를 들어, A를 알아야 요구사항을 구현할 수 있고, B가 A의 선행 지식이라면, B를 공부해야 하고,  B를 알기 위해 다시 C를 공부해야만 하는 상황이 오면  &lt;code class=&quot;highlighter-rouge&quot;&gt;뭐가 이렇게 많아.. 할게 많네.. &lt;/code&gt; 겁부터 먹었다.&lt;/p&gt;

&lt;p&gt;금요일에 한 번씩 차분히 공부하니까 재미가 찾아왔다. 일요일에 구현했던 것들을 다 지우고, 새로 시작하며 눈에 보이는 아웃풋이 정말 반가웠다..&lt;/p&gt;

&lt;p&gt;이번 주는 기술에 대한 지식보다 나 자신과 동료 학습, 목표 설정과 계획, 조바심과 멘탈 관리, 그리고 데드라인과 완성도에 대한 경험을 얻었다. 시기도 좋았던 것 같다. 한 번쯤은 경험을 통해 체화해 볼 기회가 필요했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설계&quot;&gt;설계&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;html의 구조를 어떻게 짜야 하는지 막막했다. 태그는 너무 많았고, 어떤 태그를 사용해야 하며, 어떻게 레이아웃을 배치하고,, 개인적으로 html 구조를 작성하는 게 이번 미션에서 제일 힘들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SJB님이 아무것도 없는 곳에 박스를 쌓을 순 없다고, 종이를 놓고 박스를 하나씩 올린다고 생각하며 짜보면 도움이 된다고 팁을 주셨다.  (이것보다 더 이해가 잘 가는 말이었는데, 자세한 워딩이 기억나지 않는다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개인적으로  &lt;a href=&quot;https://apps.apple.com/kr/app/mindnet-마인드맵-메모-위젯/id1344071203?mt=12&quot;&gt;MindNet&lt;/a&gt; 을 이용해서 구조를 마인드맵으로 그려보았던 게, class나 id 부여하는 데 도움이 되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;좋은 설계를 많이 봐야 좋은 설계를 할 수 있다는 조언을 들었다. 100%도 부족할 만큼 동의하지만, 늘 내가 고민하기 전에 누군가의 로직이나 코드를 보는 행위가 조금 치팅한다는 느낌을 여전히 지울 수가 없다. 어떻게 해야 할까? 일단 다가오는 미션은 고민을 먼저 하자. 그리고 적극적으로 다른 사람과 의견을 나눠보자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그리고-개발&quot;&gt;그리고 개발&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;디자인 패턴 스터디를 하며 변화에는 닫혀있고 수정에는 열려있는 객체지향 설계 패러다임에 대해 엄청난 감명을 받았고, 이제 다음 주가 되면 책 한 권을 한 번이라도 봤다는 뽕에 빠져있었다. 아마 그 당시의 나는 객체를 input으로 받아 DOM 객체를 생성한다면 js 함수 호출 몇번으로 html을 쉽게 작성할 수 있을 거란 나사 빠진 기대를 했었다.&lt;/li&gt;
  &lt;li&gt;돌아보면 웃기지만, html에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt; text &amp;lt;div&amp;gt;&lt;/code&gt; 등의 html 문법이 거슬렸다. 어차피 DOM은 트리 구조라는데 객체를 알아서 dom node로 만들어 주는 걸 구현을 하고.. 그걸 html에 동적으로 생성하자! 는 설계를 했다 (머릿속으로). 객체로 구성된 노드들이 구조를 조금 더 알아보기 편하고 수정도 용이하다고 생각했던 것 같다.&lt;/li&gt;
  &lt;li&gt;구현 후 발생하는 여러 예외케이스와 생각하지 못했던 부분들이 발생하면서 조금씩 지치기 시작했다.&lt;/li&gt;
  &lt;li&gt;객체는 누가 만들어주는데?! 내가 만들기엔 일일이 타이핑하는 수고를 감당하기 싫었다. 인풋을 적당히 받아 객체를 만들어주는 함수 구현하면서 약간 여기서 ‘아, 이게 아닌거같은데 망했다’는 걸 느끼기 시작했고 3일이 지나있었다. html 태그들도 제대로 모르는 상태였다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;동아리 선배에게 리액트나 다른 프레임워크들이 동적으로 생성하는 자신만의 컴파일러가 있는 건 반응형 등의 처리를 위해 자신의 고유 문법을 녹아내야 하기 때문이라는 말을 들었다. 나는 웹 프레임워크를 사용해보지도 않고서 패기 있게 삽질했다. &lt;code class=&quot;highlighter-rouge&quot;&gt;내가 과했다는 걸 알고, 체득해야 다음에 그렇게 안 해 &lt;/code&gt; 라는 선배의 위로를 마음에 새겼다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;일단 하고 문제가 생기면 수정하자는 전략은 개인적으로 훌륭한 전략이라고 생각한다. 하지만 문제를 인지하지 못하면 답도 없는 상황이 발생한다. 생각하며 설계하고 생각을 하며 구현해야 한다.&lt;/li&gt;
  &lt;li&gt;주말에 공부했던 Strategy 패턴을 유효성 검사에 나름 적용해보았다. 제대로 작성한 걸까에 대한 의문이 조금 남아있어 주말에 스터디원들에게 물어봐야겠다. password 로직이 마음에 들지 않는다. 함께 공부했던 State 패턴이나, 예전에 보았던 책임 연쇄로 해보고 싶다! 생각했지만 데드라인이 용납해주지 않았다.&lt;/li&gt;
  &lt;li&gt;이벤트 리스너 등록도 일단 동작하게 만들자는 마음에 지저분한 코드를 작성하게 됐다. 여기서 설계에 대한 고민이 정말 부족했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;디버깅&quot;&gt;디버깅&lt;/h3&gt;

&lt;p&gt;CSS나 html, js 모두 크롬 개발자 도구를 익숙하지 않아 소극적으로 사용했다.  다 구현하지 못한 요구사항을 구현할 때는 적극적으로 사용해보아야겠다. web pack을 사용했더니 크롬 개발자 도구 상에서 디버깅이 힘들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;스크럼&quot;&gt;스크럼&lt;/h3&gt;

&lt;p&gt;진행 상황과 오늘 계획을 팀원들과 아침에 간단히 이야기를 나누었다. 서로 진행 상황을 공유하는 것만으로도 설명하지 못하겠지만 만족스러운 활동이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그룹-코드-쉐어&quot;&gt;그룹 코드 쉐어&lt;/h3&gt;

&lt;p&gt;3일 차까지 눈에 보이는 아웃풋이 없어서 제대로 참여하지 못했고, 팀원들의 코드도 잘 보지 못해서 아쉬움이 많이 남는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;피어-세션&quot;&gt;피어 세션&lt;/h3&gt;

&lt;p&gt;기존의 팀원분들과 아닌 다른 그룹의 팀원 2분과 기존 팀원분, 총 4명이 서로의 아웃풋을 확인하고, 자신의 코드를 설명했다. 주어진 시간이 부족해서 마지막 분의 코드를 제대로 보지 못했다. 구현을 하며 이 기능은 어떤 로직을 사용했는지, 더 좋은 방법은 없을지 서로 의견을 나누었다. 체크 리스트와 리뷰 레포트 작성이 없어서 부담이 덜 되는 동시에, 서로의 코드에 집중할 수 있어서 굉장히 만족스러웠다.&lt;/p&gt;

&lt;p&gt;챌린지 과정부터 늘 좋은 리뷰어가 되고 싶다고 바랬는데, 그때보다 적극적으로 참여했던 것 같다. 팀원분들에게 내가 도움이 되었는지는 잘 모르겠지만, 점점 더 좋은 리뷰어가 될 수 있길 바래본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마스터-클래스&quot;&gt;마스터 클래스&lt;/h3&gt;

&lt;p&gt;슬프게도 매번 자리가 좋지 않다…  미션을 하면서 궁금했던 걸 질문할 수 있는 시간을 가졌다. 그 후에, 피처 계획과 관리, 커밋 로그, 좋은 코드에 대한 조건은 무엇일까? 공부해볼 만한 것들등에 대해 이야기를 하셨고, 몇몇 브랜치에 대해 코드 리뷰를 하는 시간을 가졌다.&lt;/p&gt;

&lt;p&gt;정말 진짜 아주 정말 뭐라 형용할 수 없을 정도로 깊은 감명을 받은 시간이었는데 체화하려면 조금 시간이 필요할 것 같다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Later equals never&lt;/code&gt; 이라 든데 과연 내가 이 많은 내용들을 소화할 수 있는 날이 올까 ?! 차근히 하나씩 스텝을 밟아가야지 😭..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;회고&quot;&gt;회고&lt;/h3&gt;

&lt;p&gt;마스터 클래스 후 팀원분들과 지난 미션을 돌아보며 회고의 시간을 가졌다. 한 주의 마지막 일정이었는데, 나는 이 활동을 굉장히 좋아한다. 타임라인을 돌아보고,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(✚) 잘했던 것, 좋았던 것, 계속할 것&lt;/p&gt;

  &lt;p&gt;(➖) 잘못했던 것, 아쉬운 것, 부족한 것 → 개선 방향&lt;/p&gt;

  &lt;p&gt;(❗️) 도전할 것, 시도할 것&lt;/p&gt;

  &lt;p&gt;(❔) 키워드 (공부한 것, 알게 된 것, 느낀 점)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 총 네 가지에 대해 팀원들과 이야기를 나눈다. 나는 좋은 내용이 있으면 카피해서 내 회고지에 써넣는다ㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;마스터 클래스 코드 리뷰 시간에 고수분들의 브랜치를 보며,  &lt;code class=&quot;highlighter-rouge&quot;&gt;다들 잘하는데 나만 못해&lt;/code&gt; 라는 생각이 들기 충분했고, 의욕과 동시에 약간의 현타와 조바심을 느꼈다. 이런 상황에서, 한 팀원 분의 말씀이 인상 깊었다.  그 분도 처음에 비슷한 심정이었던 것 같다.  “잘하는 사람과 비교하며 페이스를 뺏기지 말자. 내 페이스에 최선을 다하자” 는 말씀을 하셨다. 이번 주 내내, 경쟁이 아닌 자신의 성장에 초점을 맞추려던 나의 노력과 통하는 말이었고, 그분의 언어로 표현한 것이 마음에 들었다.  내 페이스를 조절하는 것.&lt;/p&gt;

&lt;p&gt;기존의 회고지에서 항목이 하나 더 업데이트되었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;이번 주 나의 성장이 우리 그룹의 성장에 도움이 되었는지, 좋은 영향을 주었는지 회고해보세요.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이번 주에 팀원분들에게 좋은 영향을 주지 못해서 아쉬웠다. 다음 주에는 스터디 팀원분들과 조금 더 개선된 방향으로 좋은 아웃풋을 함께 내보고 싶다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;반성을-해보자&quot;&gt;반성을 해보자&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;집중력이 부족했다. 집중력을 저하하는 요소를 줄여보자.&lt;/li&gt;
  &lt;li&gt;가끔 내 태도가 개선하려는 건지,  불평을 하려는 건지 헷갈릴 때가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;앞으로의-계획&quot;&gt;앞으로의 계획&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;부릉 버스는 출근, 점심, 2시, 4시, 6시, 퇴근으로 줄여보자.&lt;/li&gt;
  &lt;li&gt;커밋 메세지를 잘 남겨보자&lt;/li&gt;
  &lt;li&gt;1.01^365 vs 0.99^365&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;하고-싶다&quot;&gt;하고 싶다..&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;다른 사람의 브랜치 보기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;매일 회고하기&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TIL&lt;/code&gt;을 This week I learned이 아니라 Today I learned로 작성하고 싶다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;좀 더 좋은 방법이 없을까? 고민 습관화&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마음 속의 큐에 끝도 없이 쌓여있는데, 일단 이번주는 위의 내용들을 개선해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;스스로를-칭찬하고-싶다&quot;&gt;스스로를 칭찬하고 싶다&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;3일째까지 참담하고 막막한 심정과 조바심에 자책하지 않았다. 이상할 정도로 긍정적이었다. 자괴감에 빠졌으면 답이 정말 없겠다 생각했다. 조금 오글거리지만, 언어가 사고를 지배하고, 생각이 감정을 만든다. 마음가짐이 정말 중요한 것 같다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;나름 열린 태도로 한 주를 살았다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;약간의-고민&quot;&gt;약간의 고민&lt;/h3&gt;

&lt;p&gt;지금 하는 것들을 감당하기 힘들면서 선택을 할 수가 없다. 내 욕심을 내가 소화할 수 있을까? 선택과 집중이 좀 더 좋은 아웃풋을 내지 않을까?! 다행히도 북스터디에서 이번 주를 마지막으로 3주 휴식의 시간을 가진다. 숨통이 트일 것 같다. 주말을 주말답게.. .. ..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마무리&quot;&gt;마무리&lt;/h3&gt;

&lt;p&gt;끌려가는 기분, 마감에 쫓기는 기분은 유쾌한 경험은 아니었다. 그래도 덕분에 내 문제에 대해 돌아볼 수 있었다. 지난 한 주를 보면 재밌어도 그만두거나, 귀찮아도 힘들어도 지속하는 면에서 절제도 참 부족했다. 돌아보면 왜 이런 아웃풋이 나왔는지 이해 갈 정도로 개선해야 할 점만 한가득한 첫 주였다.&lt;/p&gt;

&lt;p&gt;즐기면서 하고 싶은데, 다 모르겠고 된 것도 없고 초반을 노잼으로 보낸 게 아쉽다. 알고리즘 공부했을 때도 그렇고, 먼저 학습한 후에 직접 구현해 보면서 알아가는 재미도 있고, 성취감도 느끼는데 무작정하려니까 뭘 공부해야 할지도 모르겠고, 무얼 모르는지도 모르겠고, 파국이었다. 앞으로도 낯선 개념을 공부해야 하는 건 똑같을 텐데.. 새로운 개념을 어떻게 학습하고 적용하는 시간을 줄일 수 있을지, 공부와 구현에 시간을 어떻게 투자하냐에 대해 여러 시도를 해보며 내 페이스를 찾아가야겠다.&lt;/p&gt;

&lt;p&gt;수많은 바람들이 있지만, 생각만 한다면 개선되지 않는다. 꾸준히 생각하고 실천해야만 의미가 있다. 이렇게 한주를 돌아보니까 약간 환골탈태하는 기분이 든다. 한 번에 많은 것들을 고칠 순 없겠지만 날마다 조금씩 의도적으로 개선해가길 바래본다.&lt;/p&gt;

&lt;p&gt;그리고 스트레칭 좀 자주 해야겠다. 거북목인가 목이 너무 아프다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;진짜-마무리&quot;&gt;진짜 마무리&lt;/h4&gt;

&lt;p&gt;지난 한 주간 나에게 고민에서나 구현에서나 멘탈에 대해서나 도움을 주었던 많은 분들에게 무한한 고마움을 느낀다!&lt;/p&gt;</content><author><name></name></author><category term="회고" /><category term="부스트캠프" /><summary type="html">부제 - tmi.. 미래의 내가 보려고 쓰는 회고..</summary></entry><entry><title type="html">부스트캠프2019 챌린지 회고</title><link href="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%842019-%EC%B1%8C%EB%A6%B0%EC%A7%80-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="부스트캠프2019 챌린지 회고 " /><published>2019-08-11T00:00:00+09:00</published><updated>2019-08-11T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%842019%20%EC%B1%8C%EB%A6%B0%EC%A7%80%20%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%842019-%EC%B1%8C%EB%A6%B0%EC%A7%80-%ED%9A%8C%EA%B3%A0/">&lt;p&gt;까미노에는 거리의 곳곳마다 &lt;strong&gt;노란 화살표&lt;/strong&gt;가 있다. 낯선 땅에서 노란 화살표는 내가 걸어야할 길을 알려주는 이정표였다. 가끔 마음대로 걸어버리는 바람에 길을 잃기도 했지만, 나는 무사히 산티아고에 도착할 수 있었다.&lt;/p&gt;

&lt;p&gt;낯선 땅에서 나아갈 방향을 알려주는 지침이 있다는 건 큰 선물이다. 좋은 기회가 주어져서 참여할 수 있었던 부스트캠프 챌린지 과정은 내게 앞으로 개발자로서 성장에 있어 &lt;strong&gt;좋은 길잡이&lt;/strong&gt;었다. 한 달동안 정말 많이 배울 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아침 10시부터 저녁 9시까지 노트북 앞에 앉아서 동료들과 함께 전날 미션에 대해 리뷰를 하고, 코딩을 했다. 잘하고 싶다면 그게 무엇이든 밥먹듯이 해야한다고 생각한다. 그리고 4주간 정말 밥먹듯이 코딩을 했다. 매주 월요일에 자기 회고 시간을 가지며, 팀원들과 지난 한주에 대해 이야기를 나누고, 매주 금요일마다 릴레이 프로젝트를 진행했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;나는-무엇을-배웠나&quot;&gt;&lt;mark&gt;나는 무엇을 배웠나?&lt;/mark&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;설계의 중요성 : &lt;strong&gt;변할 수 있는 요구사항이 무엇인가&lt;/strong&gt;를 고민한다. 확장에는 열려있고, 수정에 닫혀있도록 추상화를 잘해야한다는 걸 뼈저리게 배웠다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 사람이 읽기 쉬운 코드를 짜고, 동료의 코드를 잘 이해할 수 있어야 협업이 원활해진다. 다른 사람의 코드를 잘 이해하려면 다른 사람의 코드를 많이 보고 많이 알아야 한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 구조를 손으로 그려봄으로써, 무작정 코드를 짜는 습관을 고쳤다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;무언가를 정말 잘 이해하기 위해서 비슷하게 동작하는 프로그램을 만들어보는 게 효과적이다&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디버깅하는 법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자신을 돌아보는 것&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;아쉬운-것들&quot;&gt;아쉬운 것들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;밤 9시에 끝나는 날이면 피곤해서 피어세션 준비가 힘들었고, 피어세션에서 좀 더 적극적일 수 있었던 기회를 놓쳤다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그날 학습한 내용을 그날 소화시키지 못했던 적이 많았다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;미션의 의도나 구현을 할 때 더 괜찮은 방법을 좀 더 고민해볼 수 있지 않았을까&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;잘하고 싶다는 욕망이 때로 원동력을 주지만,  잘해야한다는 심리적 압박감이 족쇄가 되기도 했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시작 전에 목표를 좀 더 구체화했더라면, 더 많은 것을 얻어갈 수 있지 않았을까&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hyesun03.github.io/2016/10/05/egolessProgramming/#disqus_thread&quot;&gt;egoless programming&lt;/a&gt; 에서 다음과 같은 내용이 나온다&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;네가 실수를 할 수 있음을 이해하고 받아들여라.&lt;/li&gt;
        &lt;li&gt;너는 네 코드가 아니다.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;정말 삽질하느라 미션을 제대로 구현하지 못한 날이 있었다. 그 당시 개인의 실패로 느껴지고 자괴감이 많이 들었다. 목표와 계획을 분리하는 자세가 부족했었고, 인정하기 힘들어서 무너져 내렸다. 수료식 마지막 날에 &lt;code class=&quot;highlighter-rouge&quot;&gt;거품도 맥주다&lt;/code&gt;라는 멋진 말을 팀원분에게 들었는데, 이 말 덕분에 앞으로 실패를 조금 더 잘 받아들일 수 있을 것 같다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;느낀-것&quot;&gt;느낀 것&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;멋있는 사람이 정말 정말 많다. 닮고 싶은 사람들을 많이 만났다.&lt;/li&gt;
  &lt;li&gt;스스로를 돌아보면 빈수레가 요란하다는 말이 떠올랐다. 알수록 진국인 사람이 되고 싶다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그-외-스스로를-칭찬하고-싶다&quot;&gt;그 외 스스로를 칭찬하고 싶다&lt;/h3&gt;

&lt;p&gt;아침마다 수영을 꼬박 꼬박 나갔고, 주말마다 &lt;a href=&quot;https://github.com/TeamCrazyPerformance/http/wiki&quot;&gt;디자인패턴 스터디&lt;/a&gt; 했다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;앞으로는&quot;&gt;앞으로는?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;지난 4주를 통해 배운 내용 곱씹고 소화하기&lt;/li&gt;
  &lt;li&gt;독서&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;지난-회고들&quot;&gt;지난 회고들&lt;/h2&gt;

&lt;h3 id=&quot;1주차-----2주차-----3주차&quot;&gt;&lt;a href=&quot;https://lallaheeee.github.io/부스트캠프-챌린지-1주차-회고/&quot;&gt;1주차&lt;/a&gt;     &lt;a href=&quot;https://lallaheeee.github.io/부스트캠프-챌린지-2주차-회고/&quot;&gt;2주차&lt;/a&gt;     &lt;a href=&quot;https://lallaheeee.github.io/부스트캠프-챌린지-3주차-회고/&quot;&gt;3주차&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;4주차&quot;&gt;4주차&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;팀원분이 코드를 깔끔하게 잘짠다고 칭찬해주셨다. 챌린지 기간 동안에 처음 듣는 코드 칭찬이라 뿌듯했다.&lt;/li&gt;
  &lt;li&gt;이번주 미션은 &lt;strong&gt;고민들, 새로 안 사실들, 도전할 것&lt;/strong&gt;을 나눠 미션을 하면서 기록해보았다. 미션에서 어떤 고민들을 했고, 구현하면서 어떤 지식들을 새로 알았으며, 후에 이렇게도 해봐야지 떠오르는 것들을 정리했다. 개인적으로 이런 기록이 내가 &lt;strong&gt;알고있는 것과 모르는 것을 구분&lt;/strong&gt;하는데 큰 도움이 되었다.&lt;/li&gt;
  &lt;li&gt;단계적으로 미션을 해결해가다가, 마지막 미션을 해결하기 위해 구조를 뜯어 고쳐야하는 순간을 마주쳤다. 설계의 중요성을 미치도록 깨달았다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="회고" /><category term="부스트캠프" /><summary type="html">까미노에는 거리의 곳곳마다 노란 화살표가 있다. 낯선 땅에서 노란 화살표는 내가 걸어야할 길을 알려주는 이정표였다. 가끔 마음대로 걸어버리는 바람에 길을 잃기도 했지만, 나는 무사히 산티아고에 도착할 수 있었다.</summary></entry><entry><title type="html">부스트캠프 챌린지 3주차 회고</title><link href="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%B1%8C%EB%A6%B0%EC%A7%80-3%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="부스트캠프 챌린지 3주차 회고" /><published>2019-08-04T00:00:00+09:00</published><updated>2019-08-04T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84%20%EC%B1%8C%EB%A6%B0%EC%A7%80%203%EC%A3%BC%EC%B0%A8%20%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%B1%8C%EB%A6%B0%EC%A7%80-3%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;이번주는 새로운 것들을 많이 배웠다. &lt;strong&gt;무언가를 정말 잘 이해하기 위해서 비슷하게 동작하는 프로그램을 만들어보았다.&lt;/strong&gt; 아직 완벽하게 소화하지는 못했지만, 흐름을 더 잘 알게 되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;스켈레톤 코드&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;생각보다 많은 사람들이 요구사항을 이해하고, 뼈대를 짜기보다 나처럼 무작정 코드를 짠다는 사실이 반가우면서도 놀라웠다. 골똘히 생각하고 분석하는 것은 귀찮은 일이다. 하지만 요구사항에 대해 정확한 이해가 개발 시간을 줄이는데 효과적이었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;저번 주에 하던 &lt;code class=&quot;highlighter-rouge&quot;&gt;Learning by doing&lt;/code&gt;에 대한 고민과 &lt;code class=&quot;highlighter-rouge&quot;&gt;고민을 어떻게 해결하나&lt;/code&gt; 에 대한 고민이 어느정도 연관이 있다고 느껴졌다.  ‘이렇게 하니까 이렇더라. 이렇게 바꾸는 게 좋을 것같아.’ 같이 빠른 상황판단과 아니다 싶으면 재빨리 갈아타는 유동성이 필요하다. &lt;strong&gt;어느 부분이 부족했고, 더 나은 방법은 없을까?&lt;/strong&gt; 는 고민이 발전에 도움이 되는 것 같다.&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;기타&quot;&gt;기타&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TeamCrazyPerformance/http/wiki/[GoF-디자인패턴]-4장-구조-패턴&quot;&gt;디자인패턴 스터디&lt;/a&gt;도 정말 유익했다. 또 수영장에서 선두를 서게 됐다. 일주일을 알차게 보내서 뿌듯하다.&lt;/p&gt;</content><author><name></name></author><category term="회고" /><category term="부스트캠프" /><summary type="html">이번주는 새로운 것들을 많이 배웠다. 무언가를 정말 잘 이해하기 위해서 비슷하게 동작하는 프로그램을 만들어보았다. 아직 완벽하게 소화하지는 못했지만, 흐름을 더 잘 알게 되었다.</summary></entry><entry><title type="html">부스트캠프 챌린지 2주차 회고</title><link href="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%B1%8C%EB%A6%B0%EC%A7%80-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="부스트캠프 챌린지 2주차 회고" /><published>2019-07-28T00:00:00+09:00</published><updated>2019-07-28T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84%20%EC%B1%8C%EB%A6%B0%EC%A7%80%202%EC%A3%BC%EC%B0%A8%20%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%B1%8C%EB%A6%B0%EC%A7%80-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;디버깅&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;breakpoint&lt;/code&gt;를 사용해보는 미션이 있었는데, 평소 &lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;에 많이 찍는 편이라, 콘솔에 찍어보면서 문제를 해결했다. 지금 사용하는 방법이 불편하더라도, 디버깅을 사용해보자보다 &lt;strong&gt;일단 알고 있는 것으로 해결하자&lt;/strong&gt;는 마음이 더 컸던 것 같다. 디버깅이 낯설어서 겁 먹은 것도 한몫했다.&lt;/p&gt;

    &lt;p&gt;9시에 해설 영상을 보니 콘솔에 출력하며 찍어보는 것은 엄청난 &lt;strong&gt;노가다&lt;/strong&gt;라는 걸 알았다. 어디가 문제인지 모르면, 문제를 찾을 때까지 &amp;gt;&lt;em&gt;끝도 없이&lt;/em&gt;&amp;lt; 찍어봐야하는 반면, 디버깅을 사용하면 여러 변수들의 값들을 한 번에 볼 수 있을 뿐만 아니라, 디버깅 콘솔에 &lt;strong&gt;원하는 변수의 값을 바로 바로 출력&lt;/strong&gt;할 수 있었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;동기/비동기&lt;/strong&gt;의 개념을 &lt;strong&gt;아는 것&lt;/strong&gt;과 &lt;strong&gt;직접 구현해보는 것&lt;/strong&gt;엔 괴리가 존재한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;.. 언젠가 동기, 비동기도 익숙해질까?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 덕분에 삽질을 엄청 했다. 별것도 아닌 것들로 많이 헤맨 날을 돌아보면,&lt;/p&gt;

    &lt;p&gt;첫째, 구글링을 &lt;strong&gt;잘&lt;/strong&gt; 해야하고,&lt;/p&gt;

    &lt;p&gt;둘째, 무작정해보는 게 때론 도움이 되지만, 무작정하기 전에 목표을 정확하게 인지하고, 그 과정들이 무엇을 의미하는지 생각을 해야 삽질을 덜 하며,&lt;/p&gt;

    &lt;p&gt;셋째, 한정된 시간내에 &lt;strong&gt;집중력&lt;/strong&gt;은 매우 중요하다&lt;/p&gt;

    &lt;p&gt;마지막으로, 겁을 먹지 않아야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;학습에 대해 고민하게 되는 밤이다. 일단 돌아가는 걸 만들자, &lt;code class=&quot;highlighter-rouge&quot;&gt;doing&lt;/code&gt;을 통해 과정을 이해하는 편이었는데, 정말 나와 맞는 방식일까 의심이 든다. 최근 일주일은 주구장창 &lt;code class=&quot;highlighter-rouge&quot;&gt;doing&lt;/code&gt;만하지 이해가 결여된 느낌이다. 목표는 &lt;code class=&quot;highlighter-rouge&quot;&gt;learning by doing&lt;/code&gt;인데, 오로지 미션해결만을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;doing&lt;/code&gt;을 했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떻게하면 이해를 &lt;strong&gt;잘&lt;/strong&gt; 할 수 있고, 어떻게 하면 내가 필요한 지식을 &lt;strong&gt;잘&lt;/strong&gt; 검색할 수 있을까. 몇가지 키워드를 잘 조합해보면 그렇게 어렵지 않은데, 넘쳐나는 정보 중에 정말 내가 필요한 것들을 &lt;strong&gt;선별하고 이해하는 데&lt;/strong&gt; 어려움을 겪는다. 급한 성격과 모니터로 글을 잘 못 읽는 게 한 몫하는 것 같다 .&lt;/p&gt;

    &lt;p&gt;천천히 하자. 많이 이해할수록 외울 것도, 시행 착오도 적어진다. 한정된 시간 덕분에 매우 효율적인 지식 습득을 고민하게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;좋은 개발자란 무엇일까?&lt;/strong&gt; 일단 돌아가게 만들자며 지저분한 코드를 짜면서 어딘가 잘못됐다는 생각이 들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;몇일 알고리즘 안풀었다고 엄청 낯설다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/TeamCrazyPerformance/http/wiki/[GoF-디자인패턴]-4장-구조-패턴&quot;&gt;디자인패턴 스터디&lt;/a&gt;에서 발표 사다리타기에 걸렸다. 내가 공부한 바를 설명하면서 &lt;strong&gt;아, 나 이부분 잘 이해하지 못했네&lt;/strong&gt;  깨닫게 됐다. 유익한 시간이었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="회고" /><category term="부스트캠프" /><summary type="html">디버깅 breakpoint를 사용해보는 미션이 있었는데, 평소 console에 많이 찍는 편이라, 콘솔에 찍어보면서 문제를 해결했다. 지금 사용하는 방법이 불편하더라도, 디버깅을 사용해보자보다 일단 알고 있는 것으로 해결하자는 마음이 더 컸던 것 같다. 디버깅이 낯설어서 겁 먹은 것도 한몫했다.</summary></entry><entry><title type="html">부스트캠프 챌린지 1주차 회고</title><link href="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%B1%8C%EB%A6%B0%EC%A7%80-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/" rel="alternate" type="text/html" title="부스트캠프 챌린지 1주차 회고" /><published>2019-07-20T00:00:00+09:00</published><updated>2019-07-20T00:00:00+09:00</updated><id>http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84%20%EC%B1%8C%EB%A6%B0%EC%A7%80%201%EC%A3%BC%EC%B0%A8%20%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="http://localhost:4000/%EB%B6%80%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%B1%8C%EB%A6%B0%EC%A7%80-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0/">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;합격 발표 후 4일 후 바로 입과여서 빠듯했다. 지방러분들은 머물 집도 구해야하니까 힘들었을 것 같다. 본가도 가고 싶었고, 조금 쉬고 싶었는데 눈 깜짝할 새 입과가 다가왔다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원하던 &lt;code class=&quot;highlighter-rouge&quot;&gt;서울숲 캠프&lt;/code&gt;로 배정받았다. 교통의 요지 강남이 수요가 더 넘쳤는지, 강남을 선택하신 몇 분이 서울숲으로 배정받은 것 같았다. 개인적으로 난 &lt;code class=&quot;highlighter-rouge&quot;&gt;패스트파이브&lt;/code&gt; 엄청..매우..정말.. 좋다. 도보로 이동할 수 있을만큼 가까운 게 제일 좋고, 트렌디하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;깔끔한 인테리어&lt;/code&gt;와 무제한으로 이용할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;커피&lt;/code&gt; 도 좋다. 거기다 &lt;code class=&quot;highlighter-rouge&quot;&gt;시리얼&lt;/code&gt; 도 있어서 아침에 수영하고 먹었는데, 한주동안 정말 &lt;strong&gt;든든&lt;/strong&gt;했다. 그 밖에 &lt;code class=&quot;highlighter-rouge&quot;&gt;드래프트 비어&lt;/code&gt;도 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;과일수&lt;/code&gt;도 있고, 2층 라운지 좋다&lt;/p&gt;

    &lt;p&gt;릴레이 프로젝트 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;패스트파이브 뽕뽑기&lt;/code&gt; 랭킹을 매기는 웹사이트 주제가 나왔는데 이미 있었다면 아마 내가 1위였을것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4일을 미션을 해결하고 금요일 하루 &lt;code class=&quot;highlighter-rouge&quot;&gt;릴레이 프로젝트&lt;/code&gt;를 진행하는데, 엄청 &lt;code class=&quot;highlighter-rouge&quot;&gt;유쾌한&lt;/code&gt; 시간이었다. 처음 본 8명의 &lt;code class=&quot;highlighter-rouge&quot;&gt;부캠러&lt;/code&gt;들과 &lt;strong&gt;약 6시간동안만&lt;/strong&gt; 함께하는 팀이었지만, 주어진 주제에 대해 가벼운 마음으로 즐기면서 기획할 수 있어서 낯선 어색함이 빨리 해소된 느낌이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;미션은 첫주차라 쉬웠다. 물론 아직도  &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; 를 제대로 이해하지 못했고, 그날 많이 헤맸지만…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;는 책 예제 몇번 따라쓴 거 빼고 처음이라 많이 낯설었는데, 과제를 해결하며 익숙해져가고 있다. 나에게 딱 맞는 학습 방법인 것 같다. 다만 코드 리뷰할 때, 팀원 모두가 &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;가 처음이라면 갈길을 잃어버린 표류자가 되는 기분이 들었다. 9시에 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt;이 끝났을때 &lt;code class=&quot;highlighter-rouge&quot;&gt;약 160개의 PR의 바다&lt;/code&gt;를 헤엄치면 되는데.. 난 &lt;code class=&quot;highlighter-rouge&quot;&gt;수영&lt;/code&gt;을 좋아하니까..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자신감이 부족하다는 생각을 평소에 잘 하지 않았는데, 어떤 면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;자기 PR&lt;/code&gt; 이 좀 부족하다는 생각이 들었다. 가만히 있으면 절반이라도 가는데, 나서서 &lt;code class=&quot;highlighter-rouge&quot;&gt;셀프 디스&lt;/code&gt;를 하는 경향이 있는 것 같다. (예를 들어, 의견을 말할 때 &lt;del&gt;&lt;em&gt;저의 하찮은 의견이지만&lt;/em&gt;&lt;/del&gt;.. 이라고 시작과 끝을 맺는다거나) &lt;code class=&quot;highlighter-rouge&quot;&gt;잘해야된다&lt;/code&gt; 는 심리적 압박감에  &lt;code class=&quot;highlighter-rouge&quot;&gt;잘못하면 어떡하지&lt;/code&gt; 조바심을 많이 가지게 되는듯. 한 주 내내 그랬는데, 고쳐야겠다는 생각이 들었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사람들을 만나서 소통하며 공부하는 건 유익하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;arrow 함수, 함수형 프로그래밍은 낯설다. &lt;code class=&quot;highlighter-rouge&quot;&gt;javascipt&lt;/code&gt; 공부를 좀 더 해야겠다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="회고" /><category term="부스트캠프" /><summary type="html">합격 발표 후 4일 후 바로 입과여서 빠듯했다. 지방러분들은 머물 집도 구해야하니까 힘들었을 것 같다. 본가도 가고 싶었고, 조금 쉬고 싶었는데 눈 깜짝할 새 입과가 다가왔다.</summary></entry><entry><title type="html">[book] 소프트웨어 장인 ➁ 소프트웨어 장인</title><link href="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8/" rel="alternate" type="text/html" title="[book] 소프트웨어 장인 ➁ 소프트웨어 장인" /><published>2018-07-20T00:00:00+09:00</published><updated>2018-07-20T00:00:00+09:00</updated><id>http://localhost:4000/%5BBook%5D%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EC%9E%A5%EC%9D%B8%20%E2%9E%81%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EC%9E%A5%EC%9D%B8</id><content type="html" xml:base="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8/">&lt;!--more--&gt;

&lt;h3 id=&quot;매니페스토&quot;&gt;매니페스토&lt;/h3&gt;

&lt;p&gt;이 책에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;매니페스토 Manifesto&lt;/code&gt; 라는 낯선 용어가 등장한다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A7%A4%EB%8B%88%ED%8E%98%EC%8A%A4%ED%86%A0&quot;&gt;위키피디아의 정의&lt;/a&gt;에 따르면, 매니페스토는 다음과 같은 의미를 지닌다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;매니페스토&lt;/strong&gt;(Manifesto)는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B0%9C%EC%9D%B8&quot;&gt;개인&lt;/a&gt;이나 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%B2%B4&quot;&gt;단체&lt;/a&gt;가 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8C%80%EC%A4%91&quot;&gt;대중&lt;/a&gt;에 대하여 확고한 정치적 의도와 견해를 밝히는 것으로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%97%B0%EC%84%A4&quot;&gt;연설&lt;/a&gt;이나 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AC%B8%EC%84%9C&quot;&gt;문서&lt;/a&gt;의 형태이다. 종종 비정치적인 분야에서도 자신의 주장과 견해를 분명히 밝히는 때에도 사용된다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%9C%EA%B5%AD&quot;&gt;한국&lt;/a&gt;에서는 예산확보, 구체적 실행계획 등이 있어 이행이 가능한 선거 공약의 의미로 주로 쓰인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;선거공약의 개념으로 이 책에서 말하는 매니페스토를 설명하기에는 어딘가 동떨어진 느낌이다. 대한민국에서 매니페스토의 개념이 좁은 의미로만 쓰이는 걸까. &lt;a href=&quot;https://en.wikipedia.org/wiki/Manifesto&quot;&gt;위키디피아에서 영어 문서&lt;/a&gt;를 찾아보았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;strong&gt;manifesto&lt;/strong&gt; is a published verbal declaration of the intentions, motives, or views of the issuer, be it an individual, group, political party or government. A manifesto usually accepts a previously published opinion or &lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_decision-making&quot;&gt;public consensus&lt;/a&gt; or promotes a new idea with prescriptive notions for carrying out changes the author believes should be made.* &lt;strong&gt;It often is &lt;a href=&quot;https://en.wikipedia.org/wiki/Politics&quot;&gt;political&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Art_manifesto&quot;&gt;artistic&lt;/a&gt; in nature, but may present an individual’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Life_stance&quot;&gt;life stance&lt;/a&gt;.&lt;/strong&gt; Manifestos relating to &lt;a href=&quot;https://en.wikipedia.org/wiki/Religious_belief&quot;&gt;religious belief&lt;/a&gt; are generally referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Creed&quot;&gt;creeds&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;매니페스토&lt;/strong&gt;는 주로 이전에 발표된 대중의 의견이나 저자가 변경해야한다고 생각하는 &lt;strong&gt;규범적인 개념&lt;/strong&gt;으로 새로운 아이디어를 장려한다. 본질적으로 정치적이거나 예술적이지만, 개인의 &lt;strong&gt;삶의 자세&lt;/strong&gt;를 나타낼 수도 있다.&lt;/p&gt;

&lt;p&gt;선거공약 개념의 매니페스토가 아니라, &lt;code class=&quot;highlighter-rouge&quot;&gt;새로운 아이디어를 장려하고, 삶의 자세를 나타내는 개념&lt;/code&gt; 이 이 책에서 말하고자하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;매니페스토&lt;/code&gt;일 것이다.&lt;/p&gt;

&lt;h2 id=&quot;소프트웨어-장인정신&quot;&gt;소프트웨어 장인정신&lt;/h2&gt;

&lt;p&gt;이 책에서는 소프트웨어 장인정신의 여러 정의를 보여준다.&lt;/p&gt;

&lt;h3 id=&quot;위키피디아에서의-정의&quot;&gt;위키피디아에서의 정의&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘소프트웨어 장인정신’은 &lt;strong&gt;소프트웨어를 개발할 때 개발자 스스로의 코딩스킬을 강조&lt;/strong&gt;하는 개념이다. 이러한 개념은 주류 소프트웨어 업계가 개발자의 역량보다는 다른 것들, 즉 예산과 같은 것들을 우선시하는 병폐에 대한 개발자들의 반발로 나타났다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 정의를 보면,  ‘그래서 어떻게 강조하는건데?’ 라는 의문이 든다. 이에 저자 또한 위의 정의가 마음에 안들었는지, 주관적으로 소프트웨어 장인정신를 정의했다. 저자의 좀더 주관적인 정의가 제일 와닿는다.&lt;/p&gt;

&lt;h3 id=&quot;좀더-주관적인-정의&quot;&gt;좀더 주관적인 정의&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인정신은 &lt;strong&gt;마스터가 되어가는 긴 여정&lt;/strong&gt;이다. 소프트웨어 장인정신은 소프트웨어 개발자가 &lt;strong&gt;스스로 선택한 커리어에 책임감을 가지고, 지속적으로 새로운 도구와 기술을 익히며 발전하겠다는 마음가짐&lt;/strong&gt;이다. 소프트웨어 장인정신은 &lt;strong&gt;책임감, 프로페셔널리즘, 실용주의, 그리고 소프트웨어 개발자로서의 자부심&lt;/strong&gt;을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마스터가 되어가는 긴 여정. IT는 끊임없이 새로운 기술이 나오는데, 컴퓨터가 아닌 이상 마스터는 닿을 수 없는 경지일지도 모르겠다. 이 업계는 지속적으로 새로운 도구와 기술을 익히며 기술과 함께 발전해야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;책임감, 프로페셔널리즘, 실용주의, 자부심.&lt;/strong&gt; 일상에서 접할 수 있는 지극히 평범한 단어들이지만, 좀 더 깊은 이해를 위해 사전에서 그 뜻을 찾아보았다. 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;책임감&lt;/strong&gt; 責任感 &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;맡아서 해야할 임무나 의무를 중히 여기는 마음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프로페셔널리즘&lt;/strong&gt; professtionalism &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;자기의 직업과 그 기능, 전문 지식에 강한 자부심과 탐구심을 가지며, 사회적 책임을 자각하는 일&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;실용주의&lt;/strong&gt; pragmatism &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;넓은 의미로는 유용성·효율성·실제성을 가리키며 학문적 의미로는 추상적·궁극적 원리의 권위에 반대하는 태도를 가리킨다.&lt;/p&gt;

  &lt;p&gt;미국을 중심으로 발달한 철학 사상으로 행동과 실천을 중시하는 철학으로 글자 그대로 현실 생활에 있어서의 유용성에 따라 사물의 가치를 결정하려는 사상&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;자부심&lt;/strong&gt; 自負心 &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  &lt;p&gt;자신의 가치나 능력을 믿고 당당히 여기는 마음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;짧은-정의&quot;&gt;짧은 정의&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인정신은 소프트웨어 개발의 프로페셔널리즘에 대한 것이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;정의-이상의-의미&quot;&gt;정의 이상의 의미&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인정신은 어떤 이념이나 마음가짐에 더 가깝다고 생각한다. (중략) 자신이 하는 일에 주인의식을 가지고 프로페셔널하게 행동하고, 고객이 원하는 것이 무엇이든 달성할 수 있도록 돕는다. 다른 개발자들에게 배우고 자신의 지식을 나누며, 경험이 부족한 개발자들을 멘토링하는 것들이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;저자의 정의에 따르면, 책임감, 프로페셔널리즘, 실용주의, 자부심은 모두 &lt;strong&gt;이념이나 마음가짐&lt;/strong&gt;이다. 이런 이념과 마음가짐을 가진 개발자를 장인이라고 부르는 걸까.&lt;/p&gt;

&lt;h3 id=&quot;공예-사업-엔지니어링-과학-또는-예술&quot;&gt;공예, 사업, 엔지니어링, 과학 또는 예술&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;초기에는 어떤 예술에 가까운 것으로 표현되었으나, 좀 지나서는 장인의 공예 작품으로 대하는 것을 선호하게 되었다. (중략)&lt;/p&gt;

  &lt;p&gt;정말 중요한 것은 비유가 아니라 그 비유가 &lt;strong&gt;상징하고, 장려하는 가치와 행동들&lt;/strong&gt;이다.&lt;/p&gt;

  &lt;p&gt;소프트웨어 장인정신은 시켜야만 일하는 역량 미달의 노동자가 아니라 소프트웨어 프로페셔널의 수준을 높여, 프로의 모습으로 일하는 소프트웨어 개발자를 지향한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제까지 요약하자면, 이념이나 마음가짐에 가까운 건데, 소프트웨어를 공예 작품으로 보고, 중세의 대장장이처럼 책임감, 프로페셔널리즘, 실용주의, 자부심을 가지는 게 소프트웨어 장인정신이라 말한다.&lt;/p&gt;

&lt;h4 id=&quot;매니페스토-1&quot;&gt;매니페스토&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인을 열망하는 우리는, 스스로의 기술을 연마하고, 다른 사람들이 기술을 배울 수 있도록 도움으로써 프로페셔널 소프트웨어 개발의 수준을 높인다. 이러한 일을 하는 과정에서 우리는 다음과 같은 가치들을 추구한다.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;동작하는 소프트웨어뿐만 아니라, &lt;strong&gt;정교하고 솜씨 있게 만들어진 작품을,&lt;/strong&gt; 변화에 대응하는 것뿐만 아니라, &lt;strong&gt;계속해서 가치를 더하는 것을,&lt;/strong&gt; 개별적으로 협력하는 것뿐만 아니라, &lt;strong&gt;프로페셔널 커뮤니티를 조성하는 것을,&lt;/strong&gt; 고객과 협업하는 것뿐만 아니라, &lt;strong&gt;생산적인 동반자 관계를,&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;이 앞의 항목들(일반 굵기)을 추구하는 과정에서, 다음 항목들(볼드체)이 꼭 필요함을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 매니페스토의 핵심은 부제, &lt;strong&gt;&lt;em&gt;‘프로페셔널 소프트웨어 개발의 수준을 높인다’&lt;/em&gt;&lt;/strong&gt;에 있다. 이 매니페스토는 경험이 많고 재능있는 개발자들이 겪는 어려움, 추구하는 가치, 열망을 담고 있다. 부실한 관리, 잘못 정의된 절차 그리고 형편없는 코드때문에 프로젝트가 실패하는 일은 없어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발자들이 이런 문제들을 직접 해결해보면서 업계의 소프트웨어 개발을 바라보는 시각을 변화시키려고 한다. 새롭고 혁신적인 절자츨 제안만 하는 것이 아니라, 개발자 스스로가 자신이 하는 일 자체에 얼마나 책임감과 열정있는지 보이려는 것이다. 뿐만 아니라 고객들과 함께 일하며 훌륭한 제품, 오래 살아 남는 소프트웨어를 만들면서 고객이 원하는 바를 성취하게끔 도우려 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;동작하는-소프트웨어-뿐만-아니라-정교하며-솜씨-있게-만들어진-작품을&quot;&gt;‘동작하는 소프트웨어 뿐만 아니라, 정교하며 솜씨 있게 만들어진 작품을’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;좋은 소프트웨어라면 그 애플리케이션이 얼마나 오래되었든 간에 개발자가 쉽게 이해할 수 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;변화에-대응하는-것뿐-아니라-계속해서-가치를-더하는-것을&quot;&gt;‘변화에 대응하는 것뿐 아니라, 계속해서 가치를 더하는 것을’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;신규 기능을 추가하거나 버그 수정만을 뜻하지 않는다. 코드를 깔끔하게 정리하고 구조를 개선하며 확장성을 높이고, 테스트 가능하게 하고, 쉽게 유지보수할 수 있게 하는 것을 포함한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어가 오래될수록 고통과 비용이 아닌 그 가치가 커져야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;개별적으로-협력하는-것뿐만-아니라-프로페셔널-커뮤니티를-조성하는-것을&quot;&gt;‘개별적으로 협력하는 것뿐만 아니라 프로페셔널 커뮤니티를 조성하는 것을’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;업계를 발전시키는 가장 좋은 방법은 새롭게 참여하는 개발자들에게 영감을 주고 멘토링함으로써 우리가 배운 바를 공유하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인은 항상 다른 사람에게 배우려 하는 겸손한 사람이어야 하고 경험이 적은 개발자와 지식을 공유하기를 주저하지 않는 사람이어야 한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;상대에게 배우는 것&lt;/strong&gt;은 더 나아지기 위한 최선의 방법이다. 블로그에 글을 올리고, 오픈 소스 프로젝트에 기여하고, 작성한 코드를 공개하고, 지역 커뮤니티에 참여하고, 다른 개발자와 페어 프로그래밍을 하는 것은 업계의 발전을 위해 할 수 있는 방법들이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 챕터에서 제일 마음에 드는 구절이다. 혼자만의 발전이 아닌 업계의 발전을 지향하는 사람이 되고 싶다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서로를 더 성장시킬 만한 사람들과 함께 일하고 지식을 나누며 상대에게 배우는 것, 그저 같은 사무실을 쓰는 동료이기보다는 서로에게 영감을 주는 프로페셔널이자 친구를 기대한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;고객과-협업하는-것뿐만-아니라-생산적인-동반자-관계를&quot;&gt;‘고객과 협업하는 것뿐만 아니라, 생산적인 동반자 관계를’&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 장인은 공장 노동자가 아니다. 적극적으로 프로젝트의 성공에 기여해야한다. 요구사항에 질문하고, 비즈니스를 이해하고, 개선사항을 제안하며, 고객 또는 고용주와 생산적인 동반자 관계를 맺어야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;동기 부여 수준이 높은 팀은 프로젝트를 성공으로 이끌 확률이 상당히 높다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;고객을 도와 그들의 업무 절차를 개선하고, 좀더 실현가능성이 높은 선택지를 제공해야 한다. 불필요한 관료주의를 없애고, 고객의 비즈니스 도메인을 이해하며 그들이 생산하는 가치와 관련된 요구사항에 질문할 수 있어야 한다. 업무 우선순위를 정하고 계획하는 것을 돕는 일 또한 프로젝트의 성공을 위해 코딩만큼 중요한 일이다. 생산적인 동반자 관계는 &lt;strong&gt;어떤 순간이든 고객에게 가치를 제공하는 것&lt;/strong&gt;을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 설명은 소프트웨어 장인정신에 국한되지 않고, 모든 분야에 아우르는 자발적인 태도를 설명한다고 생각한다. 학교에서 주어지는 팀프로젝트부터 심지어 자발적으로 든 동아리, 학보사에서 다양한 태도의 사람들을 볼 수 있었다. 대체로 자발적인 사람들은 의욕적이다. 무슨 일이든 재밌어하며, 나서서 하고 싶어 한다. 어떤 문제에 부딪혔을 때도 좌절하는 대신 해결방안을 모색한다. 그에 반해 수동적인 사람들은 모임 자체가 힘들다.&lt;/p&gt;

&lt;p&gt;‘네 인생의 주인이 돼라’ 등 자발적인 행동을 부추기는 인용구가 넘쳐나는 사회에서 너무 당연한 말이 아닐까 싶다. 청소년 때 읽었던 공부에 관한 자기계발서의 회사 버전 느낌인데, 어떻든 &lt;strong&gt;주체적으로 살자&lt;/strong&gt;는 말이라 좋다.&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;

&lt;p&gt;산드로 만쿠소 저, 권오인 옮김, 소프트웨어 장인, 길벗, 2015.09.25&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://ko.dict.naver.com/detail.nhn?docid=36931300&quot;&gt;책임감, 네이버 국어사전&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://alldic.daum.net/search.do?q=%ED%94%84%EB%A1%9C%ED%8E%98%EC%85%94%EB%84%90%EB%A6%AC%EC%A6%98&quot;&gt;프로페셔널리즘, 다음 사전&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://100.daum.net/encyclopedia/view/b13s3319b&quot;&gt;실용주의, 다음백과&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://terms.naver.com/entry.nhn?docId=924823&amp;amp;cid=47331&amp;amp;categoryId=47331&quot;&gt;실용주의, Basic 중학생이 알아야 할 사회·과학상식&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://dic.daum.net/word/view.do?wordid=kkw000215540&amp;amp;supid=kku000271121&quot;&gt;자부심, 다음 한국어사전&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="TIR" /><category term="소프트웨어 장인" /><category term="소프트웨어 장인정신" /><summary type="html"></summary></entry><entry><title type="html">[book] 소프트웨어 장인 ➀애자일</title><link href="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%95%A0%EC%9E%90%EC%9D%BC/" rel="alternate" type="text/html" title="[book] 소프트웨어 장인  ➀애자일" /><published>2018-07-19T00:00:00+09:00</published><updated>2018-07-19T00:00:00+09:00</updated><id>http://localhost:4000/%5BBook%5D%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EC%9E%A5%EC%9D%B8%20%20%E2%9E%80%EC%95%A0%EC%9E%90%EC%9D%BC</id><content type="html" xml:base="http://localhost:4000/Book-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%9E%A5%EC%9D%B8-%EC%95%A0%EC%9E%90%EC%9D%BC/">&lt;!--more--&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tir&quot;&gt;TIR&lt;/h2&gt;

&lt;p&gt;두달 전, 우아한형제들의 인턴을 지원했었다. 개발서 중 읽었던 책 중 &lt;strong&gt;중요하다&lt;/strong&gt;고 생각하는 3권과 그 이유를 적으라는 문항이 나를 당황스럽게 만들었다. 돌아보니 죄다 언어와 관련된 책들 뿐이었다. 시중에 나와있는 수많은 언어책 들 중 내가 읽은게 정말 중요하다고 어필할 수가 없었다. 기술은 끊임없이 업데이트되고 있었고, 내가 읽었던 책들은 낡은 지식이 되어가고 있었다.&lt;/p&gt;

&lt;p&gt;이 문항은 두달 후 나에게 기술과 관련된 책이 아니라, 개념에 대한 책을 찾아보게 만들었다.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;하지만 독서도 기록을 해야 더 오래 기억에 남는 법. &lt;code class=&quot;highlighter-rouge&quot;&gt;TIL&lt;/code&gt;을 본 따, &lt;code class=&quot;highlighter-rouge&quot;&gt;TIR, Today I Read&lt;/code&gt;도 해보면 어떨까 생각이 들었다. 매일 읽고 기록하고 싶다.&lt;/p&gt;

&lt;h1 id=&quot;part-1-이념과-태도&quot;&gt;Part 1 이념과 태도&lt;/h1&gt;

&lt;h2 id=&quot;21세기의-소프트웨어-개발&quot;&gt;21세기의 소프트웨어 개발&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;1990년 대에는 난해한 코드를 만들 수 있는 능력이 개발자의 실력을 가늠하는 척도였다고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;타인도 이해할 수 있는 코드를 짜야한다고 어디선가 주워들은 적이 있다. 그 때는 ‘그렇겠다. 같이 하는 일인데…’ 끄덕이고 넘어갔던 일이, 그 후 몇 번의 협업을 통해 정말 중요하다고 깨닫게 되었다. 아직도 기본을 위해 걸어야할 길이 많이 남아있지만, 남들이 이해하기 쉬운 코드를 짜고 싶다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아침에 눈을 뜰 때마다 오늘 할 일이 하고 싶어 기대되는 일만 하기로 스스로와 약속했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;정리하면 커리어 패스를 정할 때는 내가 열정이 있는 것, 진정 즐겁게 할 수 있는 것을 따라야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;초반부에는 이런 말들이 있다. 자기 개발서 같은 시작이 마음에 든다. 당연한 말들이 와닿는 건 모두가 알고 있으면서도, 그렇게 살아가는 게 힘들어서가 아닐까. ( t.m.i. 13년도 이후 자기계발서는 잘 안읽는다. 어떤 일이든 행동이 제일 중요하다는 걸 깨달았다)&lt;/p&gt;

&lt;h3 id=&quot;고참개발자&quot;&gt;고참개발자&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;10년 동안, 다른 프로젝트, 다른 기술, 다른 회사에서 일한 것과 10년 동안 같은 회사, 같은 프로젝트, 같은 사람, 같은 기술로만 일한 것은 크게 다르다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 말을 따르면, 개발자라는 직업은 &lt;strong&gt;이직&lt;/strong&gt;이 강점으로 다가올 수도 있을까?&lt;/p&gt;

&lt;h3 id=&quot;새로운-현실&quot;&gt;새로운 현실&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;코딩은 개발자가 해야 하는 많은 일들 중에 하나일뿐이다. 코딩을 잘 하거나 특정 언어나 프레임워크에 매우 익숙하다고 해서 고참 개발자가 되는 것은 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RGRG~ 코딩에 자신감이 조금 부족하고, 다른 외향적인 것들에 &lt;strong&gt;강점&lt;/strong&gt;을 가진 내가 위로받는 문구였다. 그런데 뒷부분에 &lt;code class=&quot;highlighter-rouge&quot;&gt;당연히 잘해야하는 것&lt;/code&gt;처럼 나와있었다. 설레발이었다. 개발을 조금 못해도 괜찮을거라는(?) 희망이 와르륵 무너졌다. 생각해보면, 개발을 못하는 개발자는 말이 안된다. 저자는 개발을 &lt;strong&gt;기본으로&lt;/strong&gt; 다음과 같은 &lt;strong&gt;여러 가지&lt;/strong&gt;를 할 수 있어야 한다고 말한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;고객과 대화하기&lt;/li&gt;
    &lt;li&gt;테스트/배포 자동화하기&lt;/li&gt;
    &lt;li&gt;전체 비즈니스에 영향을 미칠 기술 선정하기&lt;/li&gt;
    &lt;li&gt;지리적으로 분산된 팀들과 협업하기&lt;/li&gt;
    &lt;li&gt;고객을 도와 필요한 작업을 정의하기&lt;/li&gt;
    &lt;li&gt;우선순위 선정하기&lt;/li&gt;
    &lt;li&gt;진척 상황 보고하기&lt;/li&gt;
    &lt;li&gt;변경사항과 기대일정 관리하기&lt;/li&gt;
    &lt;li&gt;잠재 고객 및 파트너에게 제품 소개하기&lt;/li&gt;
    &lt;li&gt;사전 영업 활동 지원하기&lt;/li&gt;
    &lt;li&gt;개발 일정과 비용 산출하기&lt;/li&gt;
    &lt;li&gt;채용 면접하기&lt;/li&gt;
    &lt;li&gt;아키텍처 설계하기&lt;/li&gt;
    &lt;li&gt;비기능적 요구사항과 계약 조건(SLAS) 검토하기&lt;/li&gt;
    &lt;li&gt;사업 목표 이해하기&lt;/li&gt;
    &lt;li&gt;주어진 여건에서 최적의 결정하기&lt;/li&gt;
    &lt;li&gt;새로운 기술 주시하기&lt;/li&gt;
    &lt;li&gt;더 나은 업무 방식 찾기&lt;/li&gt;
    &lt;li&gt;고객에게 가치 있는 상품이 전달되고 있는지 고민하기&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 많은 것을 어우르는 개발자가 되길 소망한다.&lt;/p&gt;

&lt;h2 id=&quot;애자일&quot;&gt;애자일&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일은 어떤 단일 개념이 아니라, 서로 다른 &lt;strong&gt;여러 맥락에 따른 방법론과 테크닉의 조합&lt;/strong&gt;이다. 소프트웨어 프로젝트는 변화 자체가 기본 속성이고, 애자일은 개발팀과 기업들이 그러한 변화에 적응할 수 있도록 변화와 관련된 위험들을 줄인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;작년 소프트웨어 공학 때 처음 애자일에 대한 개념을 접했다. 그 당시 시험으로 암기를 했었는데, 문제에 대한 답을 적을 순 있어도 설명하기 어려웠다. 이번 독서가 애자일이 무엇인지 설명할 수 있는 계기가 되었으면 좋겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/postImages/TIR/tir-1.jpg&quot; alt=&quot;why&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;절차적인-관점에서의-애자일-원칙&quot;&gt;절차적인 관점에서의 애자일 원칙&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;팀과 조직이 어떻게 구성되고 협업해야하는지에 대한 것들을 규정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;회의 방식&lt;/li&gt;
    &lt;li&gt;구성원 각각의 역할&lt;/li&gt;
    &lt;li&gt;요구사항 파악 방법&lt;/li&gt;
    &lt;li&gt;작업 진척 속도 파악 방법&lt;/li&gt;
    &lt;li&gt;점진적/반복적으로 일할 때 취하는 방식&lt;/li&gt;
    &lt;li&gt;진행 상황을 개발팀 밖의 관계자(고객, 영업 등)에게 전달하는 방식&lt;/li&gt;
    &lt;li&gt;비즈니스 피드백 방식&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 원칙의 절차적인 부분들은 팀에 정말로 중요한 것, 비즈니스에 가치가 있는 것에 집중한다. 이러한 방법론들을 통해 팀이 올바른 결과물을 만들어가는지, 즉 &lt;strong&gt;올바른 목표를 향해 진행 중&lt;/strong&gt;인지 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;기술적인-관점에서의-애자일-원칙&quot;&gt;기술적인 관점에서의 애자일 원칙&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 원칙의 기술적인 부분들은 개발, 확장, 유지보수, 제품을 출시(또는 납품, 서비스 배포)하면서 겪는 어려움들에 대해 특정한 기술적 관례나 기술자체를 매우 구체적으로 가이드한다. &lt;strong&gt;테스트 주도 개발(TDD), 페어 프로그래밍, 지속적인 통합, 단순한 디자인 원칙&lt;/strong&gt; 등과 같은 것이다. 이러한 기술적 원칙들은 소프트웨어의 품질에 집중하면서 팀이 결과물을 올바르게 만들어 가는지, 즉 &lt;strong&gt;목표한 것을 올바르게 실행하고 있는지&lt;/strong&gt;에 대해 안심할 수 있게 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일을-따른다는-것&quot;&gt;애자일을 따른다는 것&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 방법론들은 모두 빠르고 짧은 피드백 루프에 대한 것이다. 더 빨리, 더 짧게 피드백 루프를 만들수록 더 애자일해진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일은 문제 자체를 해결해 주지는 않는다. 애자일은 문제를 드러나게 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일에서는 프로젝트 시작 첫 주부터 동작하는 소프트웨어를 만든다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;오늘날에는 테스트, 분석, 비즈니스에 대한 이해, 커뮤니케이션 능력, 보다 외향적인 성격을 소프트웨어 프로페셔널에게 요구한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일-매니페스토&quot;&gt;애자일 매니페스토&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리는 스스로 소프트웨어를 개발하고, 다른 사람들이 개발하는 것을 도와주면서 더 나은 소프트웨어 개발 방법들을 찾고 있다. 이 과정에서 우리는 다음과 같은 가치를 중요하게 생각한다.&lt;/p&gt;

  &lt;p&gt;절차와 도구보다는 &lt;strong&gt;개성과 화합을&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;방대한 문서작업보다는 &lt;strong&gt;동작하는 소프트웨어를&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;계약 조건에 대한 협상보다는 &lt;strong&gt;고객과의 협력을&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;계획을 따르는 것을 넘어서서 &lt;strong&gt;변화에 대처하는 것을&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;더 가치있게 여긴다.&lt;/p&gt;

  &lt;p&gt;좌측의 사항도 가치가 있음을 인정하지만 우리는 우측의 사항에 더 높은 가치를 둔다는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 가치관을 가지고 있는 사람들과 일하고 싶다. 무의식 속에 보통의 회사에서는 좌측의 사항에 맞추어 돌아가고, 그럴 수 밖에 없다고 느껴진다. 이익을 추구하는 집단에서 개성과 화합에 가치를 둔다는 말보다 절차와 도구에 가치를 둔다는 말이 더 와닿기 때문이다.&lt;/p&gt;

&lt;p&gt;그래서 애자일 매니페스토 웹사이트에 실린 위의 내용이 인상적이다.  우측의 사항이 좌측의 사항보다 더 효율적일 수 있다고 보는 시각이 이제까지 현업에서 겪었던 고충에 대한 해결 방안 중에 하나가 아닐까.&lt;/p&gt;

&lt;h5 id=&quot;애자일-매니페스토의-원칙들&quot;&gt;애자일 매니페스토의 원칙들&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;가치있는 소프트웨어를 일찍, 지속적으로 전달하여 고객을 만족시키는 것을 최우선으로 한다.&lt;/li&gt;
    &lt;li&gt;개발의 막바지 단계이더라도 고객의 요구사항 변경을 환영한다. 애자일 프로세스들은 변화를 활용하여 고객의 경쟁력을 높이는 데 기여한다.&lt;/li&gt;
    &lt;li&gt;동작하는 소프트웨어를 몇 주에서 몇 개월 단위로 자주 전달한다. 가능한 한 전달주기를 짧게 한다.&lt;/li&gt;
    &lt;li&gt;비즈니스 담당자들은 프로젝트 기간 내내 매일 개발자와 함께 일한다.&lt;/li&gt;
    &lt;li&gt;프로젝트는 동기가 부여된 개인들로 구성한다. 그들이 필요로 하는 환경과 지원을 제공하고 프로젝트가 완료될 때까지 믿고 맡긴다.&lt;/li&gt;
    &lt;li&gt;개발팀 내에서 정보를 전달하는 가장 효율적이고 효과적인 방법은 얼굴을 마주보고 대화하는 것이다.&lt;/li&gt;
    &lt;li&gt;프로젝트의 진척도를 가늠하는 가장 기본 요소는 동작하는 소프트웨어다.&lt;/li&gt;
    &lt;li&gt;애자일 프로세스들은 지속 가능한 개발을 이끈다. 투자자, 개발자, 사용자들은 일정한 개발속도를 계속 수용할 수 있어야 한다.&lt;/li&gt;
    &lt;li&gt;기술적인 탁월함과 좋은 설계에 대한 지속적인 관심은 기민함을 높인다.&lt;/li&gt;
    &lt;li&gt;단순함, 즉 하지 않아도 될 일은 최대한 하지 않아야 한다.&lt;/li&gt;
    &lt;li&gt;최선의 아키텍처, 요구사항, 설계는 스스로 조직화되는 팀에서 나온다.&lt;/li&gt;
    &lt;li&gt;개발팀은 정기적으로 일을 어떻게 하는 것이 더 효과적인지 되돌아보고 그에 맞추어 일하는 방식을 조율하고 바로 잡는다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일-격변기&quot;&gt;애자일 격변기&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 코치는 (중략) 기업들의 어떤 부분이 비효율적인지 가시화하고 이해할 수 있게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제를 가시화하는 것은 중요하다. 해결 방안을 모색하는 출발점이 되기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일 프로세스는 팀 구성원이 단합하고 공동의 목표를 갖도록 한다.  (중략) 피드백 루프 매커니즘을 제공하여 어느 때나 문제에 대응하고 적응할 수 있도록 해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일-행오버&quot;&gt;애자일 행오버&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;화이트보드에 포스트잇이 얼마나 많이 붙어 있느냐가 애자일 전환의 척도, 즉 얼마나 기민해졌느냐를 재는 기준이 되었다. 포스트잇이 많을수록 더 애자일 스럽게 일하고 생각한다. 애자일에 숙력된 기업들이 포스트잇을 색상과 크기에 따라 서로 다른 의미를 부여하여 잘 활용하고 있는 것은 사실이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;부분적인-전환&quot;&gt;부분적인 전환&lt;/h5&gt;

&lt;p&gt;이 부분에서는 애자일로 전환이 효과가 없었던 기업의 원인으로  ‘부분적인 전환’을 꼽는다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 프로젝트에서 &lt;strong&gt;가장 중요한 결과물이 소프트웨어 자체&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘개발자들은 이미 훌륭하고 절차만 개선하면 된다’ 는 단편적인 가정으로 사람들에 대한 기술적인 훈련에는 큰 관심을 두지 않고 절차만 개선하고, 기존의 똑같은 개발자, 똑같은 습관을 가진 사람들이 갑자기 멋진 소프트웨어를 만들기 시작할 것이라 믿는다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 단계마다 피드백이 있다는 전제에서만 절차의 개선으로 제품이 나아진다. 피드백 시스템이 동작하려면 자기가 하는 일에 충분히 주의를 기울이고 뭔가 잘못되고 있거나 더 나은 방법이 있다고 느낄 때 자기 목소리를 내는 재능 있고 프로페셔널한 사람들이 있어야 한다. 절차에만 집중하고 소프트웨어 개발을 공장 라인처럼 취급하면, 그저 시키는 일만 하고 출퇴근하는 공장 노동자와 다를 바 없는 개발자들만 생긴다. 이렇게 되면 비효율적인 피드백 시스템이 되어 전체 프로젝트에 해를 끼친다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일의 배경이 되는 기본 원칙은 기술적 탁월함이다. 애자일의 모든 절차들에는 기술적 탁월함이 전제되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;애자일-코치&quot;&gt;애자일 코치&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;궁극적인 질문은 ‘애자일 전환이 개발자의 역량 향상에 얼마나 도움이 되었는가?’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;소프트웨어-프로젝트를-바라보는-편협한-시각&quot;&gt;소프트웨어 프로젝트를 바라보는 편협한 시각&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;기술을 이해하지 못하는 사람들이 의사 결정을 하는 것은 프로젝트를 재앙으로 이끄는 지름길이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;애자일과-소프트웨어-장인-정신&quot;&gt;애자일과 소프트웨어 장인 정신&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;애자일은 조직과 비즈니스에 새로운 사고방식을 제공한다. 애자일 방법론들은 가치에 따라서 일을 이해하고, 우선순위를 정하고, 관료주의와 낭비를 줄이고, 사람들에게 권한이양과 동기부여를 하고, 피드백 루프를 만들어 준다. 이것은 기업의 반응속도를 높이고 기민하게 하며, 기업이 &lt;strong&gt;올바른 일&lt;/strong&gt;을 하도록 돕는 것이다. 소프트웨어 정신은 개발에 있어서의 프로페셔널리즘이다. 소프트웨어 장인정신은 소프트웨어 개발자로서 일을 더 잘하기 위해 가슴에 품는 일종의 이념이다. (중략) 개발자와 기업들이 &lt;strong&gt;일을 올바르게 수행&lt;/strong&gt;하도록 돕는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;요약&quot;&gt;요약&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;기업이 경쟁력을 유지하려면 소프트웨어를 빨리 개발하면서도 더 나은 품질을 유지할 수 있어야 한다. 애자일 소프트웨어 개발은 피드백 루프를 짧게 하고 변화와 고객의 요구에 빠르게 대응할 수 있는 기회를 준다. 많은 기업들이 애자일의 절차적인 부분에는 많은 관심을 기울이고 있지만 기술적 실행 관례에 대해서는 완전히 무시하고 있는 것이 현실이다.&lt;/p&gt;

  &lt;p&gt;애자일 매니페스토에서는 분명하게 ‘절차와 도구보다는 개성과 화합을’ 중요시 함을 선언하고 있지만, 애자일 전환은 온통 절차와 도구로 끝나 버린다. 스크럼을 도입하고, 스탠딩업 미팅을 하고, 백로그 관리툴을 사용하는 것만으로 갑자기 소프트웨어의 품질이 더 좋아지거나 개발자들의 역량이 높아질 수는 없다. 기술적 탁월함의 개선 없이 절차만 개선하는 것은 무의미하다.&lt;/p&gt;

  &lt;p&gt;완전한 애자일 전환을 위해서는 프로페셔널 소프트웨어 개발자들이 필요하다. 이들은 기술적 실행 관례, 기술적 전문성 그리고 관련 도구들을 마스터하고 있어야 한다. 정기적으로 계속해서 배포되는 소프트웨어에 대해서도 높은 품질을 유지시키며, 완벽하게 테스트되고 쉽게 변경할 수 있는 소프트웨어를 개발할 수 있어야 한다. 완전한 애자일 전환을 위해서는 기업들이 소프트웨어 장인정신을 품어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3개월 후, 6개월 후, 1년 후에 읽으면 지금보다 좀 더 깊은 시각으로 바라보고 또 다른 생각을 할 수 있을 거라 기대한다. 나중에 또 곱씹어서 읽어야지.&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;

&lt;p&gt;산드로 만쿠소 저, 권오인 옮김, 소프트웨어 장인, 길벗, 2015.09.25&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/LuckyYoWu/ss-70771827&quot;&gt;개발자가 되기전 누군가 알려주면 좋았을 모든 것들, 유용우&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.facebook.com/woowahanTech/posts/2093259717581289&quot;&gt;우아한형제들 CTO 김범준이 추천하는 개발 도서&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="TIR" /><category term="소프트웨어 장인" /><category term="애자일" /><summary type="html"></summary></entry></feed>